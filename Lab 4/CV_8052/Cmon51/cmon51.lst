0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 03 15:14:28 2024
0000              5   ;--------------------------------------------------------
                  5   $name cmon51
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _add_byte_buff_PARM_2
0000             27            public _fillmem_PARM_3
0000             28            public _fillmem_PARM_2
0000             29            public _regframe
0000             30            public _cnw
0000             31            public _cnr
0000             32            public _nba
0000             33            public _maskbit
0000             34            public _hexval
0000             35            public _cmdlst
0000             36            public _breakorstep
0000             37            public _nlist
0000             38            public _disp_regs
0000             39            public _add_byte_buff
0000             40            public _getwordn
0000             41            public _cleanbuff
0000             42            public _dispmem
0000             43            public _modifymem
0000             44            public _putcnl
0000             45            public _outwordnl
0000             46            public _outcursor
0000             47            public _outbytenl
0000             48            public _getsn
0000             49            public _clearline
0000             50            public _put_txbuff
0000             51            public _fill_rxbuff
0000             52            public _go_pending
0000             53            public _trace_type
0000             54            public _break_address
0000             55            public _gostep
0000             56            public _saved_int
0000             57            public _saved_jmp
0000             58            public _step_start
0000             59            public _gotbreak
0000             60            public _PC_save
0000             61            public _LEDRB_save
0000             62            public _LEDRA_save
0000             63            public _SP_save
0000             64            public _DPH_save
0000             65            public _DPL_save
0000             66            public _IE_save
0000             67            public _B_save
0000             68            public _PSW_save
0000             69            public _A_save
0000             70            public _br
0000             71            public _iram_save
0000             72            public _breakpoint
0000             73            public _buff_hasdot
0000             74            public _buff_haseq
0000             75            public _keepediting
0000             76            public _validbyte
0000             77            public _dispmem_PARM_3
0000             78            public _dispmem_PARM_2
0000             79            public _modifymem_PARM_2
0000             80            public _cursor
0000             81            public _buff
0000             82            public _putsp
0000             83            public _chartohex
0000             84            public _fillmem
0000             85            public _do_cmd
0000             86   ;--------------------------------------------------------
0000             87   ; Special Function Registers
0000             88   ;--------------------------------------------------------
0000             89   _P0             DATA 0x80
0000             90   _SP             DATA 0x81
0000             91   _DPL            DATA 0x82
0000             92   _DPH            DATA 0x83
0000             93   _PCON           DATA 0x87
0000             94   _TCON           DATA 0x88
0000             95   _TMOD           DATA 0x89
0000             96   _TL0            DATA 0x8a
0000             97   _TL1            DATA 0x8b
0000             98   _TH0            DATA 0x8c
0000             99   _TH1            DATA 0x8d
0000            100   _P1             DATA 0x90
0000            101   _SCON           DATA 0x98
0000            102   _SBUF           DATA 0x99
0000            103   _P2             DATA 0xa0
0000            104   _IE             DATA 0xa8
0000            105   _P3             DATA 0xb0
0000            106   _IP             DATA 0xb8
0000            107   _PSW            DATA 0xd0
0000            108   _ACC            DATA 0xe0
0000            109   _B              DATA 0xf0
0000            110   _T2CON          DATA 0xc8
0000            111   _RCAP2L         DATA 0xca
0000            112   _RCAP2H         DATA 0xcb
0000            113   _TL2            DATA 0xcc
0000            114   _TH2            DATA 0xcd
0000            115   _DPS            DATA 0x86
0000            116   _DPH1           DATA 0x85
0000            117   _DPL1           DATA 0x84
0000            118   _HEX0           DATA 0x91
0000            119   _HEX1           DATA 0x92
0000            120   _HEX2           DATA 0x93
0000            121   _HEX3           DATA 0x94
0000            122   _HEX4           DATA 0x8e
0000            123   _HEX5           DATA 0x8f
0000            124   _LEDRA          DATA 0xe8
0000            125   _LEDRB          DATA 0x95
0000            126   _SWA            DATA 0xe8
0000            127   _SWB            DATA 0x95
0000            128   _KEY            DATA 0xf8
0000            129   _P0MOD          DATA 0x9a
0000            130   _P1MOD          DATA 0x9b
0000            131   _P2MOD          DATA 0x9c
0000            132   _P3MOD          DATA 0x9d
0000            133   _LCD_CMD        DATA 0xd8
0000            134   _LCD_DATA       DATA 0xd9
0000            135   _LCD_MOD        DATA 0xda
0000            136   _JCMD           DATA 0xc0
0000            137   _JBUF           DATA 0xc1
0000            138   _JCNT           DATA 0xc2
0000            139   _REP_ADD_L      DATA 0xf1
0000            140   _REP_ADD_H      DATA 0xf2
0000            141   _REP_VALUE      DATA 0xf3
0000            142   _DEBUG_CALL_L   DATA 0xfa
0000            143   _DEBUG_CALL_H   DATA 0xfb
0000            144   _BPC            DATA 0xfc
0000            145   _BPS            DATA 0xfd
0000            146   _BPAL           DATA 0xfe
0000            147   _BPAH           DATA 0xff
0000            148   _LBPAL          DATA 0xfa
0000            149   _LBPAH          DATA 0xfb
0000            150   _XRAMUSEDAS     DATA 0xc3
0000            151   _FLASH_CMD      DATA 0xdb
0000            152   _FLASH_DATA     DATA 0xdc
0000            153   _FLASH_MOD      DATA 0xdd
0000            154   _FLASH_ADD0     DATA 0xe1
0000            155   _FLASH_ADD1     DATA 0xe2
0000            156   _FLASH_ADD2     DATA 0xe3
0000            157   ;--------------------------------------------------------
0000            158   ; special function bits
0000            159   ;--------------------------------------------------------
0000            160   _P0_0           BIT 0x80
0000            161   _P0_1           BIT 0x81
0000            162   _P0_2           BIT 0x82
0000            163   _P0_3           BIT 0x83
0000            164   _P0_4           BIT 0x84
0000            165   _P0_5           BIT 0x85
0000            166   _P0_6           BIT 0x86
0000            167   _P0_7           BIT 0x87
0000            168   _IT0            BIT 0x88
0000            169   _IE0            BIT 0x89
0000            170   _IT1            BIT 0x8a
0000            171   _IE1            BIT 0x8b
0000            172   _TR0            BIT 0x8c
0000            173   _TF0            BIT 0x8d
0000            174   _TR1            BIT 0x8e
0000            175   _TF1            BIT 0x8f
0000            176   _P1_0           BIT 0x90
0000            177   _P1_1           BIT 0x91
0000            178   _P1_2           BIT 0x92
0000            179   _P1_3           BIT 0x93
0000            180   _P1_4           BIT 0x94
0000            181   _P1_5           BIT 0x95
0000            182   _P1_6           BIT 0x96
0000            183   _P1_7           BIT 0x97
0000            184   _RI             BIT 0x98
0000            185   _TI             BIT 0x99
0000            186   _RB8            BIT 0x9a
0000            187   _TB8            BIT 0x9b
0000            188   _REN            BIT 0x9c
0000            189   _SM2            BIT 0x9d
0000            190   _SM1            BIT 0x9e
0000            191   _SM0            BIT 0x9f
0000            192   _P2_0           BIT 0xa0
0000            193   _P2_1           BIT 0xa1
0000            194   _P2_2           BIT 0xa2
0000            195   _P2_3           BIT 0xa3
0000            196   _P2_4           BIT 0xa4
0000            197   _P2_5           BIT 0xa5
0000            198   _P2_6           BIT 0xa6
0000            199   _P2_7           BIT 0xa7
0000            200   _EX0            BIT 0xa8
0000            201   _ET0            BIT 0xa9
0000            202   _EX1            BIT 0xaa
0000            203   _ET1            BIT 0xab
0000            204   _ES             BIT 0xac
0000            205   _ET2            BIT 0xad
0000            206   _EA             BIT 0xaf
0000            207   _P3_0           BIT 0xb0
0000            208   _P3_1           BIT 0xb1
0000            209   _P3_2           BIT 0xb2
0000            210   _P3_3           BIT 0xb3
0000            211   _P3_4           BIT 0xb4
0000            212   _P3_5           BIT 0xb5
0000            213   _P3_6           BIT 0xb6
0000            214   _P3_7           BIT 0xb7
0000            215   _RXD            BIT 0xb0
0000            216   _TXD            BIT 0xb1
0000            217   _INT0           BIT 0xb2
0000            218   _INT1           BIT 0xb3
0000            219   _T0             BIT 0xb4
0000            220   _T1             BIT 0xb5
0000            221   _WR             BIT 0xb6
0000            222   _RD             BIT 0xb7
0000            223   _PX0            BIT 0xb8
0000            224   _PT0            BIT 0xb9
0000            225   _PX1            BIT 0xba
0000            226   _PT1            BIT 0xbb
0000            227   _PS             BIT 0xbc
0000            228   _PT2            BIT 0xbd
0000            229   _P              BIT 0xd0
0000            230   _F1             BIT 0xd1
0000            231   _OV             BIT 0xd2
0000            232   _RS0            BIT 0xd3
0000            233   _RS1            BIT 0xd4
0000            234   _F0             BIT 0xd5
0000            235   _AC             BIT 0xd6
0000            236   _CY             BIT 0xd7
0000            237   _T2CON_0        BIT 0xc8
0000            238   _T2CON_1        BIT 0xc9
0000            239   _T2CON_2        BIT 0xca
0000            240   _T2CON_3        BIT 0xcb
0000            241   _T2CON_4        BIT 0xcc
0000            242   _T2CON_5        BIT 0xcd
0000            243   _T2CON_6        BIT 0xce
0000            244   _T2CON_7        BIT 0xcf
0000            245   _CP_RL2         BIT 0xc8
0000            246   _C_T2           BIT 0xc9
0000            247   _TR2            BIT 0xca
0000            248   _EXEN2          BIT 0xcb
0000            249   _TCLK           BIT 0xcc
0000            250   _RCLK           BIT 0xcd
0000            251   _EXF2           BIT 0xce
0000            252   _TF2            BIT 0xcf
0000            253   _LEDRA_0        BIT 0xe8
0000            254   _LEDRA_1        BIT 0xe9
0000            255   _LEDRA_2        BIT 0xea
0000            256   _LEDRA_3        BIT 0xeb
0000            257   _LEDRA_4        BIT 0xec
0000            258   _LEDRA_5        BIT 0xed
0000            259   _LEDRA_6        BIT 0xee
0000            260   _LEDRA_7        BIT 0xef
0000            261   _SWA_0          BIT 0xe8
0000            262   _SWA_1          BIT 0xe9
0000            263   _SWA_2          BIT 0xea
0000            264   _SWA_3          BIT 0xeb
0000            265   _SWA_4          BIT 0xec
0000            266   _SWA_5          BIT 0xed
0000            267   _SWA_6          BIT 0xee
0000            268   _SWA_7          BIT 0xef
0000            269   _KEY_0          BIT 0xf8
0000            270   _KEY_1          BIT 0xf9
0000            271   _KEY_2          BIT 0xfa
0000            272   _KEY_3          BIT 0xfb
0000            273   _LCD_RW         BIT 0xd8
0000            274   _LCD_EN         BIT 0xd9
0000            275   _LCD_RS         BIT 0xda
0000            276   _LCD_ON         BIT 0xdb
0000            277   _LCD_BLON       BIT 0xdc
0000            278   _JRXRDY         BIT 0xc0
0000            279   _JTXRDY         BIT 0xc1
0000            280   _JRXEN          BIT 0xc2
0000            281   _JTXEN          BIT 0xc3
0000            282   _JTXFULL        BIT 0xc4
0000            283   _JRXFULL        BIT 0xc5
0000            284   _JTXEMPTY       BIT 0xc6
0000            285   _JTDI           BIT 0xc7
0000            286   ;--------------------------------------------------------
0000            287   ; overlayable register banks
0000            288   ;--------------------------------------------------------
0000            289            rbank0 segment data overlay
0000            290   ;--------------------------------------------------------
0000            291   ; internal ram data
0000            292   ;--------------------------------------------------------
0000            293            rseg R_DSEG
0000            294   _buff:
0000            295            ds 32
0020            296   _cursor:
0020            297            ds 1
0021            298   _modifymem_PARM_2:
0021            299            ds 1
0022            300   _modifymem_j_1_121:
0022            301            ds 1
0023            302   _modifymem_sloc0_1_0:
0023            303            ds 1
0024            304   _modifymem_sloc1_1_0:
0024            305            ds 3
0027            306   _dispmem_PARM_2:
0027            307            ds 2
0029            308   _dispmem_PARM_3:
0029            309            ds 1
002A            310   _dispmem_begin_1_129:
002A            311            ds 3
002D            312   _dispmem_j_1_130:
002D            313            ds 2
002F            314   _do_cmd_i_1_166:
002F            315            ds 2
0031            316   _do_cmd_j_1_166:
0031            317            ds 2
0033            318   _do_cmd_n_1_166:
0033            319            ds 2
0035            320   _do_cmd_q_1_166:
0035            321            ds 2
0037            322   _do_cmd_y_1_166:
0037            323            ds 1
0038            324   _do_cmd_cmd_1_166:
0038            325            ds 1
0039            326   _do_cmd_sloc0_1_0:
0039            327            ds 2
003B            328   ;--------------------------------------------------------
003B            329   ; overlayable items in internal ram 
003B            330   ;--------------------------------------------------------
0000            331            rseg    R_OSEG
0000            332            rseg    R_OSEG
0000            333            rseg    R_OSEG
0000            334   _fillmem_PARM_2:
0000            335            ds 2
0002            336   _fillmem_PARM_3:
0002            337            ds 1
0003            338            rseg    R_OSEG
0003            339   _add_byte_buff_PARM_2:
0003            340            ds 1
0004            341            rseg    R_OSEG
0004            342   _nlist_q_1_151:
0004            343            ds 1
0005            344   _nlist_sloc0_1_0:
0005            345            ds 3
0008            346   ;--------------------------------------------------------
0008            347   ; indirectly addressable internal ram data
0008            348   ;--------------------------------------------------------
0000            349            rseg R_ISEG
0000            350   ;--------------------------------------------------------
0000            351   ; absolute internal ram data
0000            352   ;--------------------------------------------------------
0000            353            DSEG
0000            354   ;--------------------------------------------------------
0000            355   ; bit data
0000            356   ;--------------------------------------------------------
0000            357            rseg R_BSEG
0000            358   _validbyte:
0000            359            DBIT    1
0001            360   _keepediting:
0001            361            DBIT    1
0002            362   _buff_haseq:
0002            363            DBIT    1
0003            364   _buff_hasdot:
0003            365            DBIT    1
0004            366   _breakpoint:
0004            367            DBIT    1
0005            368   _do_cmd_p_bit_1_166:
0005            369            DBIT    1
0006            370   ;--------------------------------------------------------
0006            371   ; paged external ram data
0006            372   ;--------------------------------------------------------
0000            373            rseg R_PSEG
0000            374   ;--------------------------------------------------------
0000            375   ; external ram data
0000            376   ;--------------------------------------------------------
0000            377            rseg R_XSEG
8000            378            XSEG at 0x8000
8000            379   _rxcount: ds 1
8001            380            public _rxcount
0000            381            rseg R_XSEG
8001            382            XSEG at 0x8001
8001            383   _rxbuff: ds 254
80FF            384            public _rxbuff
0000            385            rseg R_XSEG
8100            386            XSEG at 0x8100
8100            387   _txcount: ds 1
8101            388            public _txcount
0000            389            rseg R_XSEG
8101            390            XSEG at 0x8101
8101            391   _txbuff: ds 254
81FF            392            public _txbuff
0000            393            rseg R_XSEG
0000            394   _iram_save:
0000            395            ds 128
0080            396   _br:
0080            397            ds 8
0088            398   _A_save:
0088            399            ds 1
0089            400   _PSW_save:
0089            401            ds 1
008A            402   _B_save:
008A            403            ds 1
008B            404   _IE_save:
008B            405            ds 1
008C            406   _DPL_save:
008C            407            ds 2
008E            408   _DPH_save:
008E            409            ds 2
0090            410   _SP_save:
0090            411            ds 1
0091            412   _LEDRA_save:
0091            413            ds 1
0092            414   _LEDRB_save:
0092            415            ds 1
0093            416   _PC_save:
0093            417            ds 2
0095            418   _gotbreak:
0095            419            ds 1
0096            420   _step_start:
0096            421            ds 2
0098            422   _saved_jmp:
0098            423            ds 3
009B            424   _saved_int:
009B            425            ds 3
009E            426   _gostep:
009E            427            ds 1
009F            428   _break_address:
009F            429            ds 2
00A1            430   _trace_type:
00A1            431            ds 1
00A2            432   _go_pending:
00A2            433            ds 1
00A3            434   ;--------------------------------------------------------
00A3            435   ; absolute external ram data
00A3            436   ;--------------------------------------------------------
81FF            437            XSEG
81FF            438   ;--------------------------------------------------------
81FF            439   ; external initialized ram data
81FF            440   ;--------------------------------------------------------
0000            441            rseg R_IXSEG
0000            442            rseg R_HOME
0000            443            rseg R_GSINIT
0000            444            rseg R_CSEG
0000            445   ;--------------------------------------------------------
0000            446   ; Interrupt vectors
0000            447   ;--------------------------------------------------------
0000            448   ;--------------------------------------------------------
0000            449   ; global & static initialisations
0000            450   ;--------------------------------------------------------
0000            451            rseg R_HOME
0000            452            rseg R_GSINIT
0000            453            rseg R_GSINIT
0000            454   ;--------------------------------------------------------
0000            455   ; data variables initialization
0000            456   ;--------------------------------------------------------
0000            457            rseg R_DINIT
0000            458            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            459   ;--------------------------------------------------------
0000            460   ; code
0000            461   ;--------------------------------------------------------
0000            462            rseg R_CSEG
0000            463   ;------------------------------------------------------------
0000            464   ;Allocation info for local variables in function 'fill_rxbuff'
0000            465   ;------------------------------------------------------------
0000            466   ;c                         Allocated to registers r2 
0000            467   ;------------------------------------------------------------
0000            468   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:79: void fill_rxbuff(void)
0000            469   ;        -----------------------------------------
0000            470   ;         function fill_rxbuff
0000            471   ;        -----------------------------------------
0000            472   _fill_rxbuff:
0000            473            using   0
0000            474   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:82: rxcount=0;
0000 908000     475            mov     dptr,#_rxcount
0003 E4         476            clr     a
0004 F0         477            movx    @dptr,a
0005            478   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:83: while(rxcount<254)
0005            479   L002014?:
0005 908000     480            mov     dptr,#_rxcount
0008 E0         481            movx    a,@dptr
0009 FA         482            mov     r2,a
000A BAFEB8     483            cjne    r2,#0xFE,L002027?
000D            484   L002027?:
000D 5000       485            jnc     L002016?
000F            486   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:85: if(RI)
000F            487   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:87: RI=0;
000F 109838     488            jbc     _RI,L002029?
0012 8000       489            sjmp    L002014?
0014            490   L002029?:
0014            491   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:88: c=SBUF;
0014 AA99       492            mov     r2,_SBUF
0016            493   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:91: while (!TI);
0016            494   L002001?:
0016            495   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:92: TI=0;
0016 1099B8     496            jbc     _TI,L002030?
0019 8000       497            sjmp    L002001?
001B            498   L002030?:
001B            499   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:93: SBUF=c;
001B 8A99       500            mov     _SBUF,r2
001D            501   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:95: if (c=='\r')
001D E4         502            clr     a
001E BA0DF8     503            cjne    r2,#0x0D,L002031?
0021 04         504            inc     a
0022            505   L002031?:
0022 FB         506            mov     r3,a
0023 6000       507            jz      L002008?
0025            508   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:97: while (!TI);
0025            509   L002004?:
0025            510   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:98: TI=0;
0025 1099B8     511            jbc     _TI,L002034?
0028 8000       512            sjmp    L002004?
002A            513   L002034?:
002A            514   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:99: SBUF='\n';
002A 75990A     515            mov     _SBUF,#0x0A
002D            516   L002008?:
002D            517   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:102: rxbuff[rxcount]=c;
002D 908000     518            mov     dptr,#_rxcount
0030 E0         519            movx    a,@dptr
0031 FC         520            mov     r4,a
0032 2401       521            add     a,#_rxbuff
0034 F582       522            mov     dpl,a
0036 E4         523            clr     a
0037 3480       524            addc    a,#(_rxbuff >> 8)
0039 F583       525            mov     dph,a
003B EA         526            mov     a,r2
003C F0         527            movx    @dptr,a
003D            528   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:103: rxcount++;
003D 908000     529            mov     dptr,#_rxcount
0040 E0         530            movx    a,@dptr
0041 2401       531            add     a,#0x01
0043 F0         532            movx    @dptr,a
0044            533   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:104: if((c=='\r') || (c=='\n')) break;
0044 EB         534            mov     a,r3
0045 7000       535            jnz     L002016?
0047 BA0A78     536            cjne    r2,#0x0A,L002014?
004A            537   L002016?:
004A            538   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:107: rxbuff[rxcount]=0;
004A 908000     539            mov     dptr,#_rxcount
004D E0         540            movx    a,@dptr
004E 2401       541            add     a,#_rxbuff
0050 F582       542            mov     dpl,a
0052 E4         543            clr     a
0053 3480       544            addc    a,#(_rxbuff >> 8)
0055 F583       545            mov     dph,a
0057 E4         546            clr     a
0058 F0         547            movx    @dptr,a
0059 22         548            ret
005A            549   ;------------------------------------------------------------
005A            550   ;Allocation info for local variables in function 'put_txbuff'
005A            551   ;------------------------------------------------------------
005A            552   ;j                         Allocated to registers r2 r3 
005A            553   ;------------------------------------------------------------
005A            554   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:110: void put_txbuff(void)
005A            555   ;        -----------------------------------------
005A            556   ;         function put_txbuff
005A            557   ;        -----------------------------------------
005A            558   _put_txbuff:
005A            559   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:113: for(j=0; j<txcount; j++)
005A 7A00       560            mov     r2,#0x00
005C 7B00       561            mov     r3,#0x00
005E            562   L003004?:
005E 908100     563            mov     dptr,#_txcount
0061 E0         564            movx    a,@dptr
0062 FC         565            mov     r4,a
0063 7D00       566            mov     r5,#0x00
0065 C3         567            clr     c
0066 EA         568            mov     a,r2
0067 9C         569            subb    a,r4
0068 EB         570            mov     a,r3
0069 6480       571            xrl     a,#0x80
006B 8DF0       572            mov     b,r5
006D 63F080     573            xrl     b,#0x80
0070 95F0       574            subb    a,b
0072 5000       575            jnc     L003007?
0074            576   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:115: while (!TI);
0074            577   L003001?:
0074            578   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:116: TI=0;
0074 109978     579            jbc     _TI,L003015?
0077 8000       580            sjmp    L003001?
0079            581   L003015?:
0079            582   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:117: SBUF=txbuff[j];
0079 EA         583            mov     a,r2
007A 2401       584            add     a,#_txbuff
007C F582       585            mov     dpl,a
007E EB         586            mov     a,r3
007F 3481       587            addc    a,#(_txbuff >> 8)
0081 F583       588            mov     dph,a
0083 E0         589            movx    a,@dptr
0084 F599       590            mov     _SBUF,a
0086            591   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:113: for(j=0; j<txcount; j++)
0086 0A         592            inc     r2
0087 BA0078     593            cjne    r2,#0x00,L003004?
008A 0B         594            inc     r3
008B 8000       595            sjmp    L003004?
008D            596   L003007?:
008D            597   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:119: txcount=0;
008D 908100     598            mov     dptr,#_txcount
0090 E4         599            clr     a
0091 F0         600            movx    @dptr,a
0092 22         601            ret
0093            602   ;------------------------------------------------------------
0093            603   ;Allocation info for local variables in function 'putsp'
0093            604   ;------------------------------------------------------------
0093            605   ;x                         Allocated to registers r2 r3 r4 
0093            606   ;j                         Allocated to registers r5 r6 
0093            607   ;------------------------------------------------------------
0093            608   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:123: void putsp(unsigned char * x)
0093            609   ;        -----------------------------------------
0093            610   ;         function putsp
0093            611   ;        -----------------------------------------
0093            612   _putsp:
0093 AA82       613            mov     r2,dpl
0095 AB83       614            mov     r3,dph
0097 ACF0       615            mov     r4,b
0099            616   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:127: j=0;
0099 7D00       617            mov     r5,#0x00
009B 7E00       618            mov     r6,#0x00
009D            619   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:128: if(P3_3==1)
009D 30B3B8     620            jnb     _P3_3,L004022?
00A0            621   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:130: while(txcount!=0);
00A0            622   L004001?:
00A0 908100     623            mov     dptr,#_txcount
00A3 E0         624            movx    a,@dptr
00A4 FF         625            mov     r7,a
00A5 7000       626            jnz     L004001?
00A7            627   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:132: while( ((*x)>0) && ((*x)<0x80) )
00A7            628   L004022?:
00A7            629   L004009?:
00A7 8A82       630            mov     dpl,r2
00A9 8B83       631            mov     dph,r3
00AB 8CF0       632            mov     b,r4
00AD 120000     633            lcall   __gptrget
00B0 FF         634            mov     r7,a
00B1 6000       635            jz      L004011?
00B3 BF80F8     636            cjne    r7,#0x80,L004029?
00B6            637   L004029?:
00B6 5000       638            jnc     L004011?
00B8            639   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:134: if(*x==(unsigned char)'\n') txbuff[j++]='\r';
00B8 BF0A38     640            cjne    r7,#0x0A,L004007?
00BB 8D07       641            mov     ar7,r5
00BD 8E00       642            mov     ar0,r6
00BF 0D         643            inc     r5
00C0 BD0078     644            cjne    r5,#0x00,L004033?
00C3 0E         645            inc     r6
00C4            646   L004033?:
00C4 EF         647            mov     a,r7
00C5 2401       648            add     a,#_txbuff
00C7 F582       649            mov     dpl,a
00C9 E8         650            mov     a,r0
00CA 3481       651            addc    a,#(_txbuff >> 8)
00CC F583       652            mov     dph,a
00CE 740D       653            mov     a,#0x0D
00D0 F0         654            movx    @dptr,a
00D1            655   L004007?:
00D1            656   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:135: txbuff[j]=*x;
00D1 ED         657            mov     a,r5
00D2 2401       658            add     a,#_txbuff
00D4 FF         659            mov     r7,a
00D5 EE         660            mov     a,r6
00D6 3481       661            addc    a,#(_txbuff >> 8)
00D8 F8         662            mov     r0,a
00D9 8A82       663            mov     dpl,r2
00DB 8B83       664            mov     dph,r3
00DD 8CF0       665            mov     b,r4
00DF 120000     666            lcall   __gptrget
00E2 F9         667            mov     r1,a
00E3 A3         668            inc     dptr
00E4 AA82       669            mov     r2,dpl
00E6 AB83       670            mov     r3,dph
00E8 8F82       671            mov     dpl,r7
00EA 8883       672            mov     dph,r0
00EC E9         673            mov     a,r1
00ED F0         674            movx    @dptr,a
00EE            675   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:136: x++;
00EE            676   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:137: j++;
00EE 0D         677            inc     r5
00EF BD0038     678            cjne    r5,#0x00,L004009?
00F2 0E         679            inc     r6
00F3 8000       680            sjmp    L004009?
00F5            681   L004011?:
00F5            682   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:139: txbuff[j]=0;
00F5 ED         683            mov     a,r5
00F6 2401       684            add     a,#_txbuff
00F8 F582       685            mov     dpl,a
00FA EE         686            mov     a,r6
00FB 3481       687            addc    a,#(_txbuff >> 8)
00FD F583       688            mov     dph,a
00FF E4         689            clr     a
0100 F0         690            movx    @dptr,a
0101            691   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:140: txcount=(j<0x100)?j:0xff;
0101 74FF       692            mov     a,#0x100 - 0x01
0103 2E         693            add     a,r6
0104 4000       694            jc      L004016?
0106 8D02       695            mov     ar2,r5
0108 8E03       696            mov     ar3,r6
010A 8000       697            sjmp    L004017?
010C            698   L004016?:
010C 7AFF       699            mov     r2,#0xFF
010E 7B00       700            mov     r3,#0x00
0110            701   L004017?:
0110 908100     702            mov     dptr,#_txcount
0113 EA         703            mov     a,r2
0114 F0         704            movx    @dptr,a
0115            705   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:141: if(P3_3==0) put_txbuff();
0115 20B338     706            jb      _P3_3,L004014?
0118 020000     707            ljmp    _put_txbuff
011B            708   L004014?:
011B 22         709            ret
011C            710   ;------------------------------------------------------------
011C            711   ;Allocation info for local variables in function 'clearline'
011C            712   ;------------------------------------------------------------
011C            713   ;j                         Allocated to registers r2 
011C            714   ;------------------------------------------------------------
011C            715   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:144: void clearline (void)
011C            716   ;        -----------------------------------------
011C            717   ;         function clearline
011C            718   ;        -----------------------------------------
011C            719   _clearline:
011C            720   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:148: if(P3_3==1)
011C 30B378     721            jnb     _P3_3,L005005?
011F            722   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:150: while(txcount!=0);
011F            723   L005001?:
011F 908100     724            mov     dptr,#_txcount
0122 E0         725            movx    a,@dptr
0123 FA         726            mov     r2,a
0124 7000       727            jnz     L005001?
0126            728   L005005?:
0126            729   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:152: txbuff[0]='\r';
0126 908101     730            mov     dptr,#_txbuff
0129 740D       731            mov     a,#0x0D
012B F0         732            movx    @dptr,a
012C            733   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:153: for(j=1; j<80; j++) txbuff[j]=' ';
012C 7A01       734            mov     r2,#0x01
012E            735   L005008?:
012E BA5040     736            cjne    r2,#0x50,L005021?
0131            737   L005021?:
0131 5000       738            jnc     L005011?
0133 EA         739            mov     a,r2
0134 2401       740            add     a,#_txbuff
0136 F582       741            mov     dpl,a
0138 E4         742            clr     a
0139 3481       743            addc    a,#(_txbuff >> 8)
013B F583       744            mov     dph,a
013D 7420       745            mov     a,#0x20
013F F0         746            movx    @dptr,a
0140 0A         747            inc     r2
0141 8000       748            sjmp    L005008?
0143            749   L005011?:
0143            750   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:154: txbuff[j]='\r';
0143 EA         751            mov     a,r2
0144 2401       752            add     a,#_txbuff
0146 F582       753            mov     dpl,a
0148 E4         754            clr     a
0149 3481       755            addc    a,#(_txbuff >> 8)
014B F583       756            mov     dph,a
014D 740D       757            mov     a,#0x0D
014F F0         758            movx    @dptr,a
0150            759   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:155: txbuff[j+1]=0;
0150 EA         760            mov     a,r2
0151 04         761            inc     a
0152 2401       762            add     a,#_txbuff
0154 F582       763            mov     dpl,a
0156 E4         764            clr     a
0157 3481       765            addc    a,#(_txbuff >> 8)
0159 F583       766            mov     dph,a
015B E4         767            clr     a
015C F0         768            movx    @dptr,a
015D            769   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:156: txcount=j;
015D 908100     770            mov     dptr,#_txcount
0160 EA         771            mov     a,r2
0161 F0         772            movx    @dptr,a
0162            773   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:157: if(P3_3==0) put_txbuff();
0162 20B3C0     774            jb      _P3_3,L005012?
0165 020000     775            ljmp    _put_txbuff
0168            776   L005012?:
0168 22         777            ret
0169            778   ;------------------------------------------------------------
0169            779   ;Allocation info for local variables in function 'getsn'
0169            780   ;------------------------------------------------------------
0169            781   ;j                         Allocated to registers r2 
0169            782   ;------------------------------------------------------------
0169            783   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:160: void getsn (void)
0169            784   ;        -----------------------------------------
0169            785   ;         function getsn
0169            786   ;        -----------------------------------------
0169            787   _getsn:
0169            788   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:164: if(P3_3==1)
0169 30B300     789            jnb     _P3_3,L006005?
016C            790   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:166: while(rxcount==0); // Wait for data to arrive
016C            791   L006001?:
016C 908000     792            mov     dptr,#_rxcount
016F E0         793            movx    a,@dptr
0170 FA         794            mov     r2,a
0171 7000       795            jnz     L006020?
0173 8000       796            sjmp    L006001?
0175            797   L006005?:
0175            798   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:170: fill_rxbuff();
0175 120000     799            lcall   _fill_rxbuff
0178            800   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:172: for(j=0; j<rxcount; j++)
0178            801   L006020?:
0178 7A00       802            mov     r2,#0x00
017A            803   L006010?:
017A 908000     804            mov     dptr,#_rxcount
017D E0         805            movx    a,@dptr
017E FB         806            mov     r3,a
017F C3         807            clr     c
0180 EA         808            mov     a,r2
0181 9B         809            subb    a,r3
0182 5000       810            jnc     L006013?
0184            811   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:174: if(j<(BUFFSIZE-1))
0184 BA1F40     812            cjne    r2,#0x1F,L006025?
0187            813   L006025?:
0187 5000       814            jnc     L006013?
0189            815   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:176: buff[j]=rxbuff[j];
0189 EA         816            mov     a,r2
018A 2420       817            add     a,#_buff
018C F8         818            mov     r0,a
018D EA         819            mov     a,r2
018E 2401       820            add     a,#_rxbuff
0190 F582       821            mov     dpl,a
0192 E4         822            clr     a
0193 3480       823            addc    a,#(_rxbuff >> 8)
0195 F583       824            mov     dph,a
0197 E0         825            movx    a,@dptr
0198 FB         826            mov     r3,a
0199 F6         827            mov     @r0,a
019A            828   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:172: for(j=0; j<rxcount; j++)
019A 0A         829            inc     r2
019B 8000       830            sjmp    L006010?
019D            831   L006013?:
019D            832   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:183: buff[j]=0;
019D EA         833            mov     a,r2
019E 2420       834            add     a,#_buff
01A0 F8         835            mov     r0,a
01A1 7600       836            mov     @r0,#0x00
01A3            837   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:184: rxcount=0;
01A3 908000     838            mov     dptr,#_rxcount
01A6 E4         839            clr     a
01A7 F0         840            movx    @dptr,a
01A8 22         841            ret
01A9            842   ;------------------------------------------------------------
01A9            843   ;Allocation info for local variables in function 'chartohex'
01A9            844   ;------------------------------------------------------------
01A9            845   ;c                         Allocated to registers 
01A9            846   ;i                         Allocated to registers r2 
01A9            847   ;------------------------------------------------------------
01A9            848   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:187: unsigned char chartohex(char c)
01A9            849   ;        -----------------------------------------
01A9            850   ;         function chartohex
01A9            851   ;        -----------------------------------------
01A9            852   _chartohex:
01A9            853   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:190: i=toupper(c)-'0';
01A9 120000     854            lcall   _toupper
01AC E582       855            mov     a,dpl
01AE 24D0       856            add     a,#0xd0
01B0            857   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:191: if(i>9) i-=7; //letter from A to F
01B0 FA         858            mov  r2,a
01B1 24F6       859            add     a,#0xff - 0x09
01B3 5000       860            jnc     L007002?
01B5 EA         861            mov     a,r2
01B6 24F9       862            add     a,#0xf9
01B8 FA         863            mov     r2,a
01B9            864   L007002?:
01B9            865   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:192: return i;
01B9 8A82       866            mov     dpl,r2
01BB 22         867            ret
01BC            868   ;------------------------------------------------------------
01BC            869   ;Allocation info for local variables in function 'outbytenl'
01BC            870   ;------------------------------------------------------------
01BC            871   ;x                         Allocated to registers r2 
01BC            872   ;------------------------------------------------------------
01BC            873   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:195: void outbytenl(unsigned char x)
01BC            874   ;        -----------------------------------------
01BC            875   ;         function outbytenl
01BC            876   ;        -----------------------------------------
01BC            877   _outbytenl:
01BC AA82       878            mov     r2,dpl
01BE            879   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:197: get_txbuff();
01BE C002       880            push    ar2
01C0 120000     881            lcall   _get_txbuff
01C3 D002       882            pop     ar2
01C5            883   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:198: add_byte_txbuff(x);
01C5 8A82       884            mov     dpl,r2
01C7 120000     885            lcall   _add_byte_txbuff
01CA            886   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:199: add_nlcursor_txbuff();
01CA 120000     887            lcall   _add_nlcursor_txbuff
01CD            888   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:200: flush_txbuff();
01CD 020000     889            ljmp    _flush_txbuff
01D0            890   ;------------------------------------------------------------
01D0            891   ;Allocation info for local variables in function 'outcursor'
01D0            892   ;------------------------------------------------------------
01D0            893   ;------------------------------------------------------------
01D0            894   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:203: void outcursor(void)
01D0            895   ;        -----------------------------------------
01D0            896   ;         function outcursor
01D0            897   ;        -----------------------------------------
01D0            898   _outcursor:
01D0            899   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:205: get_txbuff();
01D0 120000     900            lcall   _get_txbuff
01D3            901   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:206: add_cursor_txbuff();
01D3 120000     902            lcall   _add_cursor_txbuff
01D6            903   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:207: flush_txbuff();
01D6 020000     904            ljmp    _flush_txbuff
01D9            905   ;------------------------------------------------------------
01D9            906   ;Allocation info for local variables in function 'outwordnl'
01D9            907   ;------------------------------------------------------------
01D9            908   ;val                       Allocated to registers r2 r3 
01D9            909   ;------------------------------------------------------------
01D9            910   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:210: void outwordnl (unsigned int val)
01D9            911   ;        -----------------------------------------
01D9            912   ;         function outwordnl
01D9            913   ;        -----------------------------------------
01D9            914   _outwordnl:
01D9 AA82       915            mov     r2,dpl
01DB AB83       916            mov     r3,dph
01DD            917   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:212: get_txbuff();
01DD C002       918            push    ar2
01DF C003       919            push    ar3
01E1 120000     920            lcall   _get_txbuff
01E4 D003       921            pop     ar3
01E6 D002       922            pop     ar2
01E8            923   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:213: add_word_txbuff(val);
01E8 8A82       924            mov     dpl,r2
01EA 8B83       925            mov     dph,r3
01EC 120000     926            lcall   _add_word_txbuff
01EF            927   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:214: add_nlcursor_txbuff();
01EF 120000     928            lcall   _add_nlcursor_txbuff
01F2            929   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:215: flush_txbuff();
01F2 020000     930            ljmp    _flush_txbuff
01F5            931   ;------------------------------------------------------------
01F5            932   ;Allocation info for local variables in function 'putcnl'
01F5            933   ;------------------------------------------------------------
01F5            934   ;c                         Allocated to registers r2 
01F5            935   ;------------------------------------------------------------
01F5            936   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:218: void putcnl(char c)
01F5            937   ;        -----------------------------------------
01F5            938   ;         function putcnl
01F5            939   ;        -----------------------------------------
01F5            940   _putcnl:
01F5 AA82       941            mov     r2,dpl
01F7            942   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:220: get_txbuff();
01F7 C002       943            push    ar2
01F9 120000     944            lcall   _get_txbuff
01FC D002       945            pop     ar2
01FE            946   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:221: add_char_txbuff(c);
01FE 8A82       947            mov     dpl,r2
0200 120000     948            lcall   _add_char_txbuff
0203            949   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:222: add_nlcursor_txbuff();
0203 120000     950            lcall   _add_nlcursor_txbuff
0206            951   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:223: flush_txbuff();
0206 020000     952            ljmp    _flush_txbuff
0209            953   ;------------------------------------------------------------
0209            954   ;Allocation info for local variables in function 'fillmem'
0209            955   ;------------------------------------------------------------
0209            956   ;len                       Allocated with name '_fillmem_PARM_2'
0209            957   ;val                       Allocated with name '_fillmem_PARM_3'
0209            958   ;begin                     Allocated to registers r2 r3 r4 
0209            959   ;------------------------------------------------------------
0209            960   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:227: void fillmem(unsigned char * begin,  unsigned int len, unsigned char val)
0209            961   ;        -----------------------------------------
0209            962   ;         function fillmem
0209            963   ;        -----------------------------------------
0209            964   _fillmem:
0209 AA82       965            mov     r2,dpl
020B AB83       966            mov     r3,dph
020D ACF0       967            mov     r4,b
020F            968   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:229: while(len)
020F ADE0       969            mov     r5,_fillmem_PARM_2
0211 AEE1       970            mov     r6,(_fillmem_PARM_2 + 1)
0213            971   L012001?:
0213 ED         972            mov     a,r5
0214 4E         973            orl     a,r6
0215 6000       974            jz      L012004?
0217            975   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:231: *begin=val;
0217 8A82       976            mov     dpl,r2
0219 8B83       977            mov     dph,r3
021B 8CF0       978            mov     b,r4
021D E5A0       979            mov     a,_fillmem_PARM_3
021F 120000     980            lcall   __gptrput
0222 A3         981            inc     dptr
0223 AA82       982            mov     r2,dpl
0225 AB83       983            mov     r3,dph
0227            984   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:232: begin++;
0227            985   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:233: len--;
0227 1D         986            dec     r5
0228 BDFF10     987            cjne    r5,#0xff,L012001?
022B 1E         988            dec     r6
022C 8000       989            sjmp    L012001?
022E            990   L012004?:
022E 22         991            ret
022F            992   ;------------------------------------------------------------
022F            993   ;Allocation info for local variables in function 'modifymem'
022F            994   ;------------------------------------------------------------
022F            995   ;loc                       Allocated with name '_modifymem_PARM_2'
022F            996   ;ptr                       Allocated to registers r2 r3 r4 
022F            997   ;j                         Allocated with name '_modifymem_j_1_121'
022F            998   ;sloc0                     Allocated with name '_modifymem_sloc0_1_0'
022F            999   ;sloc1                     Allocated with name '_modifymem_sloc1_1_0'
022F           1000   ;------------------------------------------------------------
022F           1001   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:238: void modifymem(unsigned char * ptr,  char loc)
022F           1002   ;        -----------------------------------------
022F           1003   ;         function modifymem
022F           1004   ;        -----------------------------------------
022F           1005   _modifymem:
022F AA82      1006            mov     r2,dpl
0231 AB83      1007            mov     r3,dph
0233 ACF0      1008            mov     r4,b
0235           1009   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:242: get_txbuff();
0235 C002      1010            push    ar2
0237 C003      1011            push    ar3
0239 C004      1012            push    ar4
023B 120000    1013            lcall   _get_txbuff
023E D004      1014            pop     ar4
0240 D003      1015            pop     ar3
0242 D002      1016            pop     ar2
0244           1017   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:243: while(1)
0244 7449      1018            mov     a,#0x49
0246 B5A0D0    1019            cjne    a,_modifymem_PARM_2,L013054?
0249 7401      1020            mov     a,#0x01
024B 8000      1021            sjmp    L013055?
024D           1022   L013054?:
024D E4        1023            clr     a
024E           1024   L013055?:
024E F588      1025            mov     _modifymem_sloc0_1_0,a
0250 7444      1026            mov     a,#0x44
0252 B5A050    1027            cjne    a,_modifymem_PARM_2,L013056?
0255 7401      1028            mov     a,#0x01
0257 8000      1029            sjmp    L013057?
0259           1030   L013056?:
0259 E4        1031            clr     a
025A           1032   L013057?:
025A FE        1033            mov     r6,a
025B           1034   L013024?:
025B           1035   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:245: add_char_txbuff(loc);
025B 85A082    1036            mov     dpl,_modifymem_PARM_2
025E C002      1037            push    ar2
0260 C003      1038            push    ar3
0262 C004      1039            push    ar4
0264 C006      1040            push    ar6
0266 120000    1041            lcall   _add_char_txbuff
0269           1042   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:246: add_char_txbuff(':');
0269 75823A    1043            mov     dpl,#0x3A
026C 120000    1044            lcall   _add_char_txbuff
026F D006      1045            pop     ar6
0271 D004      1046            pop     ar4
0273 D003      1047            pop     ar3
0275 D002      1048            pop     ar2
0277           1049   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:248: if((loc=='D')||(loc=='I'))
0277 EE        1050            mov     a,r6
0278 7000      1051            jnz     L013001?
027A E588      1052            mov     a,_modifymem_sloc0_1_0
027C 6000      1053            jz      L013002?
027E           1054   L013001?:
027E           1055   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:249: add_byte_txbuff((unsigned char)ptr);
027E 8A82      1056            mov     dpl,r2
0280 C002      1057            push    ar2
0282 C003      1058            push    ar3
0284 C004      1059            push    ar4
0286 C006      1060            push    ar6
0288 120000    1061            lcall   _add_byte_txbuff
028B D006      1062            pop     ar6
028D D004      1063            pop     ar4
028F D003      1064            pop     ar3
0291 D002      1065            pop     ar2
0293 8000      1066            sjmp    L013003?
0295           1067   L013002?:
0295           1068   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:251: add_word_txbuff((unsigned int)ptr);
0295 8A82      1069            mov     dpl,r2
0297 8B83      1070            mov     dph,r3
0299 C002      1071            push    ar2
029B C003      1072            push    ar3
029D C004      1073            push    ar4
029F C006      1074            push    ar6
02A1 120000    1075            lcall   _add_word_txbuff
02A4 D006      1076            pop     ar6
02A6 D004      1077            pop     ar4
02A8 D003      1078            pop     ar3
02AA D002      1079            pop     ar2
02AC           1080   L013003?:
02AC           1081   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:253: add_str_txbuff("=  ");
02AC 9097D0    1082            mov     dptr,#__str_0
02AF 75F080    1083            mov     b,#0x80
02B2 C002      1084            push    ar2
02B4 C003      1085            push    ar3
02B6 C004      1086            push    ar4
02B8 C006      1087            push    ar6
02BA 120000    1088            lcall   _add_str_txbuff
02BD           1089   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:254: flush_txbuff();
02BD 120000    1090            lcall   _flush_txbuff
02C0 D006      1091            pop     ar6
02C2 D004      1092            pop     ar4
02C4 D003      1093            pop     ar3
02C6 D002      1094            pop     ar2
02C8           1095   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:257: if(P3_3==0) fill_rxbuff(); // Using the serial port
02C8 20B350    1096            jb      _P3_3,L013007?
02CB C002      1097            push    ar2
02CD C003      1098            push    ar3
02CF C004      1099            push    ar4
02D1 C006      1100            push    ar6
02D3 120000    1101            lcall   _fill_rxbuff
02D6 D006      1102            pop     ar6
02D8 D004      1103            pop     ar4
02DA D003      1104            pop     ar3
02DC D002      1105            pop     ar2
02DE           1106   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:258: while(rxcount==0);
02DE           1107   L013007?:
02DE 908000    1108            mov     dptr,#_rxcount
02E1 E0        1109            movx    a,@dptr
02E2 FF        1110            mov     r7,a
02E3 6000      1111            jz      L013007?
02E5           1112   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:259: if( (!isxdigit(rxbuff[0])) || (!isxdigit(rxbuff[1])) )
02E5 908001    1113            mov     dptr,#_rxbuff
02E8 E0        1114            movx    a,@dptr
02E9 F582      1115            mov     dpl,a
02EB C002      1116            push    ar2
02ED C003      1117            push    ar3
02EF C004      1118            push    ar4
02F1 C006      1119            push    ar6
02F3 120000    1120            lcall   _isxdigit
02F6 E582      1121            mov     a,dpl
02F8 D006      1122            pop     ar6
02FA D004      1123            pop     ar4
02FC D003      1124            pop     ar3
02FE D002      1125            pop     ar2
0300 6000      1126            jz      L013019?
0302 908002    1127            mov     dptr,#(_rxbuff + 0x0001)
0305 E0        1128            movx    a,@dptr
0306 F582      1129            mov     dpl,a
0308 C002      1130            push    ar2
030A C003      1131            push    ar3
030C C004      1132            push    ar4
030E C006      1133            push    ar6
0310 120000    1134            lcall   _isxdigit
0313 E582      1135            mov     a,dpl
0315 D006      1136            pop     ar6
0317 D004      1137            pop     ar4
0319 D003      1138            pop     ar3
031B D002      1139            pop     ar2
031D 6000      1140            jz      L013063?
031F 020000    1141            ljmp    L013050?
0322           1142   L013063?:
0322           1143   L013019?:
0322           1144   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:261: if (rxbuff[0]=='\'')
0322 908001    1145            mov     dptr,#_rxbuff
0325 E0        1146            movx    a,@dptr
0326 FF        1147            mov     r7,a
0327 BF2790    1148            cjne    r7,#0x27,L013014?
032A           1149   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:263: for(j=1; (rxbuff[j]!=0) && (rxbuff[j]!='\''); j++) (*ptr++)=rxbuff[j];
032A 8A07      1150            mov     ar7,r2
032C 8B00      1151            mov     ar0,r3
032E 8C01      1152            mov     ar1,r4
0330 753801    1153            mov     _modifymem_j_1_121,#0x01
0333           1154   L013027?:
0333 E538      1155            mov     a,_modifymem_j_1_121
0335 2401      1156            add     a,#_rxbuff
0337 F582      1157            mov     dpl,a
0339 E4        1158            clr     a
033A 3480      1159            addc    a,#(_rxbuff >> 8)
033C F583      1160            mov     dph,a
033E E0        1161            movx    a,@dptr
033F FD        1162            mov     r5,a
0340 BD0010    1163            cjne    r5,#0x00,L013066?
0343 020000    1164            ljmp    L013052?
0346           1165   L013066?:
0346 E538      1166            mov     a,_modifymem_j_1_121
0348 2401      1167            add     a,#_rxbuff
034A F582      1168            mov     dpl,a
034C E4        1169            clr     a
034D 3480      1170            addc    a,#(_rxbuff >> 8)
034F F583      1171            mov     dph,a
0351 E0        1172            movx    a,@dptr
0352 FD        1173            mov     r5,a
0353 BD2790    1174            cjne    r5,#0x27,L013067?
0356 020000    1175            ljmp    L013052?
0359           1176   L013067?:
0359 E538      1177            mov     a,_modifymem_j_1_121
035B 2401      1178            add     a,#_rxbuff
035D F582      1179            mov     dpl,a
035F E4        1180            clr     a
0360 3480      1181            addc    a,#(_rxbuff >> 8)
0362 F583      1182            mov     dph,a
0364 E0        1183            movx    a,@dptr
0365 FD        1184            mov     r5,a
0366 8F82      1185            mov     dpl,r7
0368 8883      1186            mov     dph,r0
036A 89F0      1187            mov     b,r1
036C 120000    1188            lcall   __gptrput
036F A3        1189            inc     dptr
0370 AF82      1190            mov     r7,dpl
0372 A883      1191            mov     r0,dph
0374 8F02      1192            mov     ar2,r7
0376 8803      1193            mov     ar3,r0
0378 8904      1194            mov     ar4,r1
037A 0538      1195            inc     _modifymem_j_1_121
037C 8000      1196            sjmp    L013027?
037E           1197   L013014?:
037E           1198   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:265: else if (toupper(rxbuff[0])!='S')
037E 908001    1199            mov     dptr,#_rxbuff
0381 E0        1200            movx    a,@dptr
0382 F582      1201            mov     dpl,a
0384 C002      1202            push    ar2
0386 C003      1203            push    ar3
0388 C004      1204            push    ar4
038A C006      1205            push    ar6
038C 120000    1206            lcall   _toupper
038F AD82      1207            mov     r5,dpl
0391 D006      1208            pop     ar6
0393 D004      1209            pop     ar4
0395 D003      1210            pop     ar3
0397 D002      1211            pop     ar2
0399 BD53D0    1212            cjne    r5,#0x53,L013068?
039C 8000      1213            sjmp    L013011?
039E           1214   L013068?:
039E           1215   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:267: rxcount=0;
039E 908000    1216            mov     dptr,#_rxcount
03A1 E4        1217            clr     a
03A2 F0        1218            movx    @dptr,a
03A3           1219   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:268: break; // get out of while(1) loop
03A3 020000    1220            ljmp    L013025?
03A6           1221   L013011?:
03A6           1222   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:270: else ptr++;
03A6 0A        1223            inc     r2
03A7 BA0090    1224            cjne    r2,#0x00,L013069?
03AA 0B        1225            inc     r3
03AB           1226   L013069?:
03AB 020000    1227            ljmp    L013021?
03AE           1228   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:274: for(j=0; j<rxcount; j+=3)
03AE           1229   L013050?:
03AE 8AD8      1230            mov     _modifymem_sloc1_1_0,r2
03B0 8BD9      1231            mov     (_modifymem_sloc1_1_0 + 1),r3
03B2 8CDA      1232            mov     (_modifymem_sloc1_1_0 + 2),r4
03B4 753800    1233            mov     _modifymem_j_1_121,#0x00
03B7           1234   L013031?:
03B7 908000    1235            mov     dptr,#_rxcount
03BA E0        1236            movx    a,@dptr
03BB FD        1237            mov     r5,a
03BC C3        1238            clr     c
03BD E538      1239            mov     a,_modifymem_j_1_121
03BF 9D        1240            subb    a,r5
03C0 4000      1241            jc      L013070?
03C2 020000    1242            ljmp    L013053?
03C5           1243   L013070?:
03C5           1244   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:276: if( (isxdigit(rxbuff[j])) && (isxdigit(rxbuff[j+1])) )
03C5 E538      1245            mov     a,_modifymem_j_1_121
03C7 2401      1246            add     a,#_rxbuff
03C9 F582      1247            mov     dpl,a
03CB E4        1248            clr     a
03CC 3480      1249            addc    a,#(_rxbuff >> 8)
03CE F583      1250            mov     dph,a
03D0 E0        1251            movx    a,@dptr
03D1 F582      1252            mov     dpl,a
03D3 C006      1253            push    ar6
03D5 120000    1254            lcall   _isxdigit
03D8 E582      1255            mov     a,dpl
03DA D006      1256            pop     ar6
03DC 6000      1257            jz      L013033?
03DE E538      1258            mov     a,_modifymem_j_1_121
03E0 04        1259            inc     a
03E1 2401      1260            add     a,#_rxbuff
03E3 F582      1261            mov     dpl,a
03E5 E4        1262            clr     a
03E6 3480      1263            addc    a,#(_rxbuff >> 8)
03E8 F583      1264            mov     dph,a
03EA E0        1265            movx    a,@dptr
03EB F582      1266            mov     dpl,a
03ED C006      1267            push    ar6
03EF 120000    1268            lcall   _isxdigit
03F2 E582      1269            mov     a,dpl
03F4 D006      1270            pop     ar6
03F6 6000      1271            jz      L013033?
03F8           1272   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:278: (*ptr++)=chartohex(rxbuff[j])*0x10+chartohex(rxbuff[j+1]);
03F8 C006      1273            push    ar6
03FA E538      1274            mov     a,_modifymem_j_1_121
03FC 2401      1275            add     a,#_rxbuff
03FE F582      1276            mov     dpl,a
0400 E4        1277            clr     a
0401 3480      1278            addc    a,#(_rxbuff >> 8)
0403 F583      1279            mov     dph,a
0405 E0        1280            movx    a,@dptr
0406 F582      1281            mov     dpl,a
0408 C006      1282            push    ar6
040A 120000    1283            lcall   _chartohex
040D AD82      1284            mov     r5,dpl
040F D006      1285            pop     ar6
0411 ED        1286            mov     a,r5
0412 C4        1287            swap    a
0413 54F0      1288            anl     a,#0xf0
0415 FD        1289            mov     r5,a
0416 E538      1290            mov     a,_modifymem_j_1_121
0418 04        1291            inc     a
0419 2401      1292            add     a,#_rxbuff
041B F582      1293            mov     dpl,a
041D E4        1294            clr     a
041E 3480      1295            addc    a,#(_rxbuff >> 8)
0420 F583      1296            mov     dph,a
0422 E0        1297            movx    a,@dptr
0423 F582      1298            mov     dpl,a
0425 C005      1299            push    ar5
0427 120000    1300            lcall   _chartohex
042A AE82      1301            mov     r6,dpl
042C D005      1302            pop     ar5
042E EE        1303            mov     a,r6
042F 2D        1304            add     a,r5
0430 FD        1305            mov     r5,a
0431 85D882    1306            mov     dpl,_modifymem_sloc1_1_0
0434 85D983    1307            mov     dph,(_modifymem_sloc1_1_0 + 1)
0437 85DAF0    1308            mov     b,(_modifymem_sloc1_1_0 + 2)
043A 120000    1309            lcall   __gptrput
043D A3        1310            inc     dptr
043E 8582D8    1311            mov     _modifymem_sloc1_1_0,dpl
0441 8583D9    1312            mov     (_modifymem_sloc1_1_0 + 1),dph
0444 AAD8      1313            mov     r2,_modifymem_sloc1_1_0
0446 ABD9      1314            mov     r3,(_modifymem_sloc1_1_0 + 1)
0448 ACDA      1315            mov     r4,(_modifymem_sloc1_1_0 + 2)
044A           1316   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:285: flush_txbuff();
044A D006      1317            pop     ar6
044C           1318   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:278: (*ptr++)=chartohex(rxbuff[j])*0x10+chartohex(rxbuff[j+1]);
044C           1319   L013033?:
044C           1320   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:274: for(j=0; j<rxcount; j+=3)
044C 0538      1321            inc     _modifymem_j_1_121
044E 0538      1322            inc     _modifymem_j_1_121
0450 0538      1323            inc     _modifymem_j_1_121
0452 020000    1324            ljmp    L013031?
0455           1325   L013052?:
0455 8F02      1326            mov     ar2,r7
0457 8803      1327            mov     ar3,r0
0459 8904      1328            mov     ar4,r1
045B           1329   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:285: flush_txbuff();
045B           1330   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:274: for(j=0; j<rxcount; j+=3)
045B 8000      1331            sjmp    L013021?
045D           1332   L013053?:
045D AAD8      1333            mov     r2,_modifymem_sloc1_1_0
045F ABD9      1334            mov     r3,(_modifymem_sloc1_1_0 + 1)
0461 ACDA      1335            mov     r4,(_modifymem_sloc1_1_0 + 2)
0463           1336   L013021?:
0463           1337   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:282: rxcount=0;
0463 908000    1338            mov     dptr,#_rxcount
0466 E4        1339            clr     a
0467 F0        1340            movx    @dptr,a
0468 020000    1341            ljmp    L013024?
046B           1342   L013025?:
046B           1343   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:284: add_nlcursor_txbuff();
046B 120000    1344            lcall   _add_nlcursor_txbuff
046E           1345   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:285: flush_txbuff();
046E 020000    1346            ljmp    _flush_txbuff
0471           1347   ;------------------------------------------------------------
0471           1348   ;Allocation info for local variables in function 'dispmem'
0471           1349   ;------------------------------------------------------------
0471           1350   ;len                       Allocated with name '_dispmem_PARM_2'
0471           1351   ;loc                       Allocated with name '_dispmem_PARM_3'
0471           1352   ;begin                     Allocated with name '_dispmem_begin_1_129'
0471           1353   ;j                         Allocated with name '_dispmem_j_1_130'
0471           1354   ;n                         Allocated to registers r3 
0471           1355   ;i                         Allocated to registers r2 
0471           1356   ;k                         Allocated to registers 
0471           1357   ;------------------------------------------------------------
0471           1358   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:289: void dispmem(unsigned char * begin,  unsigned int len, char loc)
0471           1359   ;        -----------------------------------------
0471           1360   ;         function dispmem
0471           1361   ;        -----------------------------------------
0471           1362   _dispmem:
0471 858228    1363            mov     _dispmem_begin_1_129,dpl
0474 858329    1364            mov     (_dispmem_begin_1_129 + 1),dph
0477 85F02A    1365            mov     (_dispmem_begin_1_129 + 2),b
047A           1366   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:294: get_txbuff();
047A 120000    1367            lcall   _get_txbuff
047D           1368   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:296: if(len==0) len=0x80;
047D E550      1369            mov     a,_dispmem_PARM_2
047F 4551      1370            orl     a,(_dispmem_PARM_2 + 1)
0481 7000      1371            jnz     L014002?
0483 755080    1372            mov     _dispmem_PARM_2,#0x80
0486 E4        1373            clr     a
0487 F551      1374            mov     (_dispmem_PARM_2 + 1),a
0489           1375   L014002?:
0489           1376   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:298: buff[16]=0;
0489 753000    1377            mov     (_buff + 0x0010),#0x00
048C           1378   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:300: for(j=0; j<len; j++)
048C 7449      1379            mov     a,#0x49
048E B51050    1380            cjne    a,_dispmem_PARM_3,L014038?
0491 7401      1381            mov     a,#0x01
0493 8000      1382            sjmp    L014039?
0495           1383   L014038?:
0495 E4        1384            clr     a
0496           1385   L014039?:
0496 FD        1386            mov     r5,a
0497 7444      1387            mov     a,#0x44
0499 B510D0    1388            cjne    a,_dispmem_PARM_3,L014040?
049C 7401      1389            mov     a,#0x01
049E 8000      1390            sjmp    L014041?
04A0           1391   L014040?:
04A0 E4        1392            clr     a
04A1           1393   L014041?:
04A1 FE        1394            mov     r6,a
04A2 E4        1395            clr     a
04A3 F578      1396            mov     _dispmem_j_1_130,a
04A5 F579      1397            mov     (_dispmem_j_1_130 + 1),a
04A7           1398   L014018?:
04A7 C3        1399            clr     c
04A8 E578      1400            mov     a,_dispmem_j_1_130
04AA 9550      1401            subb    a,_dispmem_PARM_2
04AC E579      1402            mov     a,(_dispmem_j_1_130 + 1)
04AE 9551      1403            subb    a,(_dispmem_PARM_2 + 1)
04B0 4000      1404            jc      L014042?
04B2 020000    1405            ljmp    L014021?
04B5           1406   L014042?:
04B5           1407   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:302: if(loc=='I')
04B5 ED        1408            mov     a,r5
04B6 6000      1409            jz      L014004?
04B8           1410   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:304: n=*(idata unsigned char *)((unsigned char)begin+j);
04B8 AB28      1411            mov     r3,_dispmem_begin_1_129
04BA 7C00      1412            mov     r4,#0x00
04BC E578      1413            mov     a,_dispmem_j_1_130
04BE 2B        1414            add     a,r3
04BF FB        1415            mov     r3,a
04C0 E579      1416            mov     a,(_dispmem_j_1_130 + 1)
04C2 3C        1417            addc    a,r4
04C3 FC        1418            mov     r4,a
04C4 8B00      1419            mov     ar0,r3
04C6 8603      1420            mov     ar3,@r0
04C8 8000      1421            sjmp    L014005?
04CA           1422   L014004?:
04CA           1423   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:308: n=begin[j];
04CA E578      1424            mov     a,_dispmem_j_1_130
04CC 2528      1425            add     a,_dispmem_begin_1_129
04CE FC        1426            mov     r4,a
04CF E579      1427            mov     a,(_dispmem_j_1_130 + 1)
04D1 3529      1428            addc    a,(_dispmem_begin_1_129 + 1)
04D3 FA        1429            mov     r2,a
04D4 AF2A      1430            mov     r7,(_dispmem_begin_1_129 + 2)
04D6 8C82      1431            mov     dpl,r4
04D8 8A83      1432            mov     dph,r2
04DA 8FF0      1433            mov     b,r7
04DC 120000    1434            lcall   __gptrget
04DF FB        1435            mov     r3,a
04E0           1436   L014005?:
04E0           1437   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:310: i=j&0xf;
04E0 740F      1438            mov     a,#0x0F
04E2 5578      1439            anl     a,_dispmem_j_1_130
04E4           1440   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:312: if(i==0) 
04E4 FA        1441            mov     r2,a
04E5 7C00      1442            mov     r4,#0x00
04E7 7000      1443            jnz     L014011?
04E9           1444   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:314: add_char_txbuff(loc);  //A letter to indicate Data, Xram, Code, Idata
04E9 851082    1445            mov     dpl,_dispmem_PARM_3
04EC C002      1446            push    ar2
04EE C003      1447            push    ar3
04F0 C005      1448            push    ar5
04F2 C006      1449            push    ar6
04F4 120000    1450            lcall   _add_char_txbuff
04F7           1451   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:315: add_char_txbuff(':');
04F7 75823A    1452            mov     dpl,#0x3A
04FA 120000    1453            lcall   _add_char_txbuff
04FD D006      1454            pop     ar6
04FF D005      1455            pop     ar5
0501 D003      1456            pop     ar3
0503 D002      1457            pop     ar2
0505           1458   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:316: if((loc=='D')||(loc=='I'))
0505 EE        1459            mov     a,r6
0506 7000      1460            jnz     L014006?
0508 ED        1461            mov     a,r5
0509 6000      1462            jz      L014007?
050B           1463   L014006?:
050B           1464   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:317: add_byte_txbuff((unsigned char)begin+j);
050B AC28      1465            mov     r4,_dispmem_begin_1_129
050D E578      1466            mov     a,_dispmem_j_1_130
050F 2C        1467            add     a,r4
0510 F582      1468            mov     dpl,a
0512 C002      1469            push    ar2
0514 C003      1470            push    ar3
0516 C005      1471            push    ar5
0518 C006      1472            push    ar6
051A 120000    1473            lcall   _add_byte_txbuff
051D D006      1474            pop     ar6
051F D005      1475            pop     ar5
0521 D003      1476            pop     ar3
0523 D002      1477            pop     ar2
0525 8000      1478            sjmp    L014008?
0527           1479   L014007?:
0527           1480   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:319: add_word_txbuff((unsigned int)begin+j);
0527 AC28      1481            mov     r4,_dispmem_begin_1_129
0529 AF29      1482            mov     r7,(_dispmem_begin_1_129 + 1)
052B E578      1483            mov     a,_dispmem_j_1_130
052D 2C        1484            add     a,r4
052E F582      1485            mov     dpl,a
0530 E579      1486            mov     a,(_dispmem_j_1_130 + 1)
0532 3F        1487            addc    a,r7
0533 F583      1488            mov     dph,a
0535 C002      1489            push    ar2
0537 C003      1490            push    ar3
0539 C005      1491            push    ar5
053B C006      1492            push    ar6
053D 120000    1493            lcall   _add_word_txbuff
0540 D006      1494            pop     ar6
0542 D005      1495            pop     ar5
0544 D003      1496            pop     ar3
0546 D002      1497            pop     ar2
0548           1498   L014008?:
0548           1499   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:320: add_str_txbuff(":  ");
0548 90A090    1500            mov     dptr,#__str_1
054B 75F080    1501            mov     b,#0x80
054E C002      1502            push    ar2
0550 C003      1503            push    ar3
0552 C005      1504            push    ar5
0554 C006      1505            push    ar6
0556 120000    1506            lcall   _add_str_txbuff
0559 D006      1507            pop     ar6
055B D005      1508            pop     ar5
055D D003      1509            pop     ar3
055F D002      1510            pop     ar2
0561           1511   L014011?:
0561           1512   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:322: add_byte_txbuff(n);
0561 8B82      1513            mov     dpl,r3
0563 C002      1514            push    ar2
0565 C003      1515            push    ar3
0567 C005      1516            push    ar5
0569 C006      1517            push    ar6
056B 120000    1518            lcall   _add_byte_txbuff
056E D006      1519            pop     ar6
0570 D005      1520            pop     ar5
0572 D003      1521            pop     ar3
0574 D002      1522            pop     ar2
0576           1523   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:323: add_char_txbuff(i==7?'-':' '); //A middle separator like the old good DOS debug
0576 BA07D0    1524            cjne    r2,#0x07,L014024?
0579 7C2D      1525            mov     r4,#0x2D
057B 8000      1526            sjmp    L014025?
057D           1527   L014024?:
057D 7C20      1528            mov     r4,#0x20
057F           1529   L014025?:
057F 8C82      1530            mov     dpl,r4
0581 C002      1531            push    ar2
0583 C003      1532            push    ar3
0585 C005      1533            push    ar5
0587 C006      1534            push    ar6
0589 120000    1535            lcall   _add_char_txbuff
058C D006      1536            pop     ar6
058E D005      1537            pop     ar5
0590 D003      1538            pop     ar3
0592 D002      1539            pop     ar2
0594           1540   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:325: if((n>0x20)&&(n<0x7f))
0594 EB        1541            mov     a,r3
0595 24DF      1542            add     a,#0xff - 0x20
0597 5000      1543            jnc     L014013?
0599 BB7F90    1544            cjne    r3,#0x7F,L014050?
059C           1545   L014050?:
059C 5000      1546            jnc     L014013?
059E           1547   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:326: buff[i]=n;
059E EA        1548            mov     a,r2
059F 2420      1549            add     a,#_buff
05A1 F8        1550            mov     r0,a
05A2 A603      1551            mov     @r0,ar3
05A4 8000      1552            sjmp    L014014?
05A6           1553   L014013?:
05A6           1554   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:328: buff[i]='.';
05A6 EA        1555            mov     a,r2
05A7 2420      1556            add     a,#_buff
05A9 F8        1557            mov     r0,a
05AA 762E      1558            mov     @r0,#0x2E
05AC           1559   L014014?:
05AC           1560   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:330: if(i==0xf)
05AC BA0F10    1561            cjne    r2,#0x0F,L014020?
05AF           1562   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:332: add_str_txbuff("   ");
05AF 90A250    1563            mov     dptr,#__str_2
05B2 75F080    1564            mov     b,#0x80
05B5 C005      1565            push    ar5
05B7 C006      1566            push    ar6
05B9 120000    1567            lcall   _add_str_txbuff
05BC           1568   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:333: add_str_txbuff(buff);
05BC 905120    1569            mov     dptr,#_buff
05BF 75F040    1570            mov     b,#0x40
05C2 120000    1571            lcall   _add_str_txbuff
05C5           1572   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:334: add_char_txbuff('\r');
05C5 75820D    1573            mov     dpl,#0x0D
05C8 120000    1574            lcall   _add_char_txbuff
05CB           1575   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:335: add_char_txbuff('\n');
05CB 75820A    1576            mov     dpl,#0x0A
05CE 120000    1577            lcall   _add_char_txbuff
05D1           1578   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:336: update_txbuff();
05D1 120000    1579            lcall   _update_txbuff
05D4 D006      1580            pop     ar6
05D6 D005      1581            pop     ar5
05D8           1582   L014020?:
05D8           1583   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:300: for(j=0; j<len; j++)
05D8 0578      1584            inc     _dispmem_j_1_130
05DA E4        1585            clr     a
05DB B578D0    1586            cjne    a,_dispmem_j_1_130,L014054?
05DE 0579      1587            inc     (_dispmem_j_1_130 + 1)
05E0           1588   L014054?:
05E0 020000    1589            ljmp    L014018?
05E3           1590   L014021?:
05E3           1591   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:339: add_nlcursor_txbuff();
05E3 120000    1592            lcall   _add_nlcursor_txbuff
05E6           1593   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:340: flush_txbuff();
05E6 020000    1594            ljmp    _flush_txbuff
05E9           1595   ;------------------------------------------------------------
05E9           1596   ;Allocation info for local variables in function 'cleanbuff'
05E9           1597   ;------------------------------------------------------------
05E9           1598   ;j                         Allocated to registers r2 
05E9           1599   ;k                         Allocated to registers r2 
05E9           1600   ;------------------------------------------------------------
05E9           1601   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:344: void cleanbuff (void)
05E9           1602   ;        -----------------------------------------
05E9           1603   ;         function cleanbuff
05E9           1604   ;        -----------------------------------------
05E9           1605   _cleanbuff:
05E9           1606   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:348: buff_haseq=0;
05E9 C250      1607            clr     _buff_haseq
05EB           1608   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:349: buff_hasdot=0;
05EB C210      1609            clr     _buff_hasdot
05ED           1610   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:352: for(j=0; j<BUFFSIZE; j++)
05ED 7A00      1611            mov     r2,#0x00
05EF           1612   L015013?:
05EF BA2050    1613            cjne    r2,#0x20,L015041?
05F2           1614   L015041?:
05F2 5000      1615            jnc     L015016?
05F4           1616   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:354: buff[j]=toupper(buff[j]);
05F4 EA        1617            mov     a,r2
05F5 2420      1618            add     a,#_buff
05F7 F8        1619            mov     r0,a
05F8 8682      1620            mov     dpl,@r0
05FA C002      1621            push    ar2
05FC C000      1622            push    ar0
05FE 120000    1623            lcall   _toupper
0601 E582      1624            mov     a,dpl
0603 D000      1625            pop     ar0
0605 D002      1626            pop     ar2
0607 F6        1627            mov     @r0,a
0608           1628   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:355: if(isspace(buff[j])) buff[j]=0;
0608 EA        1629            mov     a,r2
0609 2420      1630            add     a,#_buff
060B F8        1631            mov     r0,a
060C 8682      1632            mov     dpl,@r0
060E C002      1633            push    ar2
0610 120000    1634            lcall   _isspace
0613 E582      1635            mov     a,dpl
0615 D002      1636            pop     ar2
0617 6000      1637            jz      L015002?
0619 EA        1638            mov     a,r2
061A 2420      1639            add     a,#_buff
061C F8        1640            mov     r0,a
061D 7600      1641            mov     @r0,#0x00
061F           1642   L015002?:
061F           1643   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:356: if(buff[j]=='=')
061F EA        1644            mov     a,r2
0620 2420      1645            add     a,#_buff
0622 F8        1646            mov     r0,a
0623 8603      1647            mov     ar3,@r0
0625 BB3D50    1648            cjne    r3,#0x3D,L015007?
0628           1649   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:358: buff[j]=0;
0628 7600      1650            mov     @r0,#0x00
062A           1651   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:359: buff_haseq=1;
062A D250      1652            setb    _buff_haseq
062C 8000      1653            sjmp    L015015?
062E           1654   L015007?:
062E           1655   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:361: else if((buff[j]=='.')||(buff[j]=='_'))
062E 8603      1656            mov     ar3,@r0
0630 BB2ED0    1657            cjne    r3,#0x2E,L015046?
0633 8000      1658            sjmp    L015003?
0635           1659   L015046?:
0635 BB5F90    1660            cjne    r3,#0x5F,L015015?
0638           1661   L015003?:
0638           1662   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:363: buff[j]=0;
0638 EA        1663            mov     a,r2
0639 2420      1664            add     a,#_buff
063B F8        1665            mov     r0,a
063C 7600      1666            mov     @r0,#0x00
063E           1667   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:364: buff_hasdot=1;
063E D210      1668            setb    _buff_hasdot
0640           1669   L015015?:
0640           1670   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:352: for(j=0; j<BUFFSIZE; j++)
0640 0A        1671            inc     r2
0641 8000      1672            sjmp    L015013?
0643           1673   L015016?:
0643           1674   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:369: for(j=0, k=0; j<BUFFSIZE; j++)
0643 7A00      1675            mov     r2,#0x00
0645 7B00      1676            mov     r3,#0x00
0647           1677   L015017?:
0647 BB2090    1678            cjne    r3,#0x20,L015049?
064A           1679   L015049?:
064A 5000      1680            jnc     L015037?
064C           1681   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:371: buff[k]=buff[j];
064C EA        1682            mov     a,r2
064D 2420      1683            add     a,#_buff
064F F8        1684            mov     r0,a
0650 EB        1685            mov     a,r3
0651 2420      1686            add     a,#_buff
0653 F9        1687            mov     r1,a
0654 8704      1688            mov     ar4,@r1
0656 A604      1689            mov     @r0,ar4
0658           1690   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:372: if( ((buff[j]!=0)||(buff[j+1]!=0)) && buff[0]!=0) k++;
0658 EC        1691            mov     a,r4
0659 7000      1692            jnz     L015012?
065B EB        1693            mov     a,r3
065C 04        1694            inc     a
065D 2420      1695            add     a,#_buff
065F F8        1696            mov     r0,a
0660 E6        1697            mov     a,@r0
0661 6000      1698            jz      L015019?
0663           1699   L015012?:
0663 E520      1700            mov     a,_buff
0665 6000      1701            jz      L015019?
0667 0A        1702            inc     r2
0668           1703   L015019?:
0668           1704   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:369: for(j=0, k=0; j<BUFFSIZE; j++)
0668 0B        1705            inc     r3
0669 8000      1706            sjmp    L015017?
066B           1707   L015037?:
066B           1708   L015021?:
066B           1709   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:374: for(; k<BUFFSIZE; k++) buff[k]=0;
066B BA20D0    1710            cjne    r2,#0x20,L015054?
066E           1711   L015054?:
066E 5000      1712            jnc     L015025?
0670 EA        1713            mov     a,r2
0671 2420      1714            add     a,#_buff
0673 F8        1715            mov     r0,a
0674 7600      1716            mov     @r0,#0x00
0676 0A        1717            inc     r2
0677 8000      1718            sjmp    L015021?
0679           1719   L015025?:
0679 22        1720            ret
067A           1721   ;------------------------------------------------------------
067A           1722   ;Allocation info for local variables in function 'getwordn'
067A           1723   ;------------------------------------------------------------
067A           1724   ;word                      Allocated to registers r2 r3 
067A           1725   ;------------------------------------------------------------
067A           1726   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:378: unsigned int getwordn(void)
067A           1727   ;        -----------------------------------------
067A           1728   ;         function getwordn
067A           1729   ;        -----------------------------------------
067A           1730   _getwordn:
067A           1731   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:380: unsigned int word=0;
067A 7A00      1732            mov     r2,#0x00
067C 7B00      1733            mov     r3,#0x00
067E           1734   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:387: cursor++;
067E           1735   L016003?:
067E           1736   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:382: for( ; buff[cursor]!=0; cursor++)
067E E5E0      1737            mov     a,_cursor
0680 2420      1738            add     a,#_buff
0682 F8        1739            mov     r0,a
0683 8604      1740            mov     ar4,@r0
0685 BC0090    1741            cjne    r4,#0x00,L016012?
0688 8000      1742            sjmp    L016006?
068A           1743   L016012?:
068A           1744   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:384: if(isxdigit(buff[cursor]))
068A 8C82      1745            mov     dpl,r4
068C C002      1746            push    ar2
068E C003      1747            push    ar3
0690 120000    1748            lcall   _isxdigit
0693 E582      1749            mov     a,dpl
0695 D003      1750            pop     ar3
0697 D002      1751            pop     ar2
0699 6000      1752            jz      L016005?
069B           1753   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:385: word=(word*0x10)+chartohex(buff[cursor]);
069B 8A04      1754            mov     ar4,r2
069D EB        1755            mov     a,r3
069E C4        1756            swap    a
069F 54F0      1757            anl     a,#0xf0
06A1 CC        1758            xch     a,r4
06A2 C4        1759            swap    a
06A3 CC        1760            xch     a,r4
06A4 6C        1761            xrl     a,r4
06A5 CC        1762            xch     a,r4
06A6 54F0      1763            anl     a,#0xf0
06A8 CC        1764            xch     a,r4
06A9 6C        1765            xrl     a,r4
06AA FD        1766            mov     r5,a
06AB E5E0      1767            mov     a,_cursor
06AD 2420      1768            add     a,#_buff
06AF F8        1769            mov     r0,a
06B0 8682      1770            mov     dpl,@r0
06B2 C004      1771            push    ar4
06B4 C005      1772            push    ar5
06B6 120000    1773            lcall   _chartohex
06B9 AE82      1774            mov     r6,dpl
06BB D005      1775            pop     ar5
06BD D004      1776            pop     ar4
06BF 7F00      1777            mov     r7,#0x00
06C1 EE        1778            mov     a,r6
06C2 2C        1779            add     a,r4
06C3 FA        1780            mov     r2,a
06C4 EF        1781            mov     a,r7
06C5 3D        1782            addc    a,r5
06C6 FB        1783            mov     r3,a
06C7           1784   L016005?:
06C7           1785   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:382: for( ; buff[cursor]!=0; cursor++)
06C7 05E0      1786            inc     _cursor
06C9 8000      1787            sjmp    L016003?
06CB           1788   L016006?:
06CB           1789   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:387: cursor++;
06CB 05E0      1790            inc     _cursor
06CD           1791   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:388: return word;
06CD 8A82      1792            mov     dpl,r2
06CF 8B83      1793            mov     dph,r3
06D1 22        1794            ret
06D2           1795   ;------------------------------------------------------------
06D2           1796   ;Allocation info for local variables in function 'add_byte_buff'
06D2           1797   ;------------------------------------------------------------
06D2           1798   ;loc                       Allocated with name '_add_byte_buff_PARM_2'
06D2           1799   ;val                       Allocated to registers r2 
06D2           1800   ;------------------------------------------------------------
06D2           1801   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:391: void add_byte_buff(unsigned char val, unsigned char loc)
06D2           1802   ;        -----------------------------------------
06D2           1803   ;         function add_byte_buff
06D2           1804   ;        -----------------------------------------
06D2           1805   _add_byte_buff:
06D2 AA82      1806            mov     r2,dpl
06D4           1807   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:393: txbuff[loc]=  hexval[val/0x10];
06D4 E560      1808            mov     a,_add_byte_buff_PARM_2
06D6 2401      1809            add     a,#_txbuff
06D8 FB        1810            mov     r3,a
06D9 E4        1811            clr     a
06DA 3481      1812            addc    a,#(_txbuff >> 8)
06DC FC        1813            mov     r4,a
06DD EA        1814            mov     a,r2
06DE C4        1815            swap    a
06DF 540F      1816            anl     a,#0x0f
06E1 901360    1817            mov     dptr,#_hexval
06E4 93        1818            movc    a,@a+dptr
06E5 8B82      1819            mov     dpl,r3
06E7 8C83      1820            mov     dph,r4
06E9 F0        1821            movx    @dptr,a
06EA           1822   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:394: txbuff[loc+1]=hexval[val&0x0f];
06EA E560      1823            mov     a,_add_byte_buff_PARM_2
06EC 04        1824            inc     a
06ED 2401      1825            add     a,#_txbuff
06EF FB        1826            mov     r3,a
06F0 E4        1827            clr     a
06F1 3481      1828            addc    a,#(_txbuff >> 8)
06F3 FC        1829            mov     r4,a
06F4 740F      1830            mov     a,#0x0F
06F6 5A        1831            anl     a,r2
06F7 901360    1832            mov     dptr,#_hexval
06FA 93        1833            movc    a,@a+dptr
06FB 8B82      1834            mov     dpl,r3
06FD 8C83      1835            mov     dph,r4
06FF F0        1836            movx    @dptr,a
0700 22        1837            ret
0701           1838   ;------------------------------------------------------------
0701           1839   ;Allocation info for local variables in function 'disp_regs'
0701           1840   ;------------------------------------------------------------
0701           1841   ;j                         Allocated to registers r4 
0701           1842   ;bank                      Allocated to registers r2 
0701           1843   ;------------------------------------------------------------
0701           1844   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:405: void disp_regs(void)
0701           1845   ;        -----------------------------------------
0701           1846   ;         function disp_regs
0701           1847   ;        -----------------------------------------
0701           1848   _disp_regs:
0701           1849   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:409: get_txbuff();
0701 120000    1850            lcall   _get_txbuff
0704           1851   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:410: add_str_txbuff(regframe);
0704 901220    1852            mov     dptr,#_regframe
0707 75F080    1853            mov     b,#0x80
070A 120000    1854            lcall   _add_str_txbuff
070D           1855   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:412: add_byte_buff(A_save,   3);
070D 904E10    1856            mov     dptr,#_A_save
0710 E0        1857            movx    a,@dptr
0711 FA        1858            mov     r2,a
0712 756003    1859            mov     _add_byte_buff_PARM_2,#0x03
0715 8A82      1860            mov     dpl,r2
0717 120000    1861            lcall   _add_byte_buff
071A           1862   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:413: add_byte_buff(B_save,   10);
071A 904D90    1863            mov     dptr,#_B_save
071D E0        1864            movx    a,@dptr
071E FA        1865            mov     r2,a
071F 75600A    1866            mov     _add_byte_buff_PARM_2,#0x0A
0722 8A82      1867            mov     dpl,r2
0724 120000    1868            lcall   _add_byte_buff
0727           1869   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:414: add_byte_buff(SP_save,  17);
0727 904C90    1870            mov     dptr,#_SP_save
072A E0        1871            movx    a,@dptr
072B FA        1872            mov     r2,a
072C 756011    1873            mov     _add_byte_buff_PARM_2,#0x11
072F 8A82      1874            mov     dpl,r2
0731 120000    1875            lcall   _add_byte_buff
0734           1876   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:415: add_byte_buff(IE_save,  24);
0734 904D50    1877            mov     dptr,#_IE_save
0737 E0        1878            movx    a,@dptr
0738 FA        1879            mov     r2,a
0739 756018    1880            mov     _add_byte_buff_PARM_2,#0x18
073C 8A82      1881            mov     dpl,r2
073E 120000    1882            lcall   _add_byte_buff
0741           1883   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:416: add_byte_buff(DPH_save, 32);
0741 904CD0    1884            mov     dptr,#_DPH_save
0744 E0        1885            movx    a,@dptr
0745 FA        1886            mov     r2,a
0746 A3        1887            inc     dptr
0747 E0        1888            movx    a,@dptr
0748 8A82      1889            mov     dpl,r2
074A 756020    1890            mov     _add_byte_buff_PARM_2,#0x20
074D 120000    1891            lcall   _add_byte_buff
0750           1892   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:417: add_byte_buff(DPL_save, 39);
0750 904D10    1893            mov     dptr,#_DPL_save
0753 E0        1894            movx    a,@dptr
0754 FA        1895            mov     r2,a
0755 A3        1896            inc     dptr
0756 E0        1897            movx    a,@dptr
0757 8A82      1898            mov     dpl,r2
0759 756027    1899            mov     _add_byte_buff_PARM_2,#0x27
075C 120000    1900            lcall   _add_byte_buff
075F           1901   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:418: add_byte_buff(PSW_save, 46);
075F 904DD0    1902            mov     dptr,#_PSW_save
0762 E0        1903            movx    a,@dptr
0763 FA        1904            mov     r2,a
0764 75602E    1905            mov     _add_byte_buff_PARM_2,#0x2E
0767 8A82      1906            mov     dpl,r2
0769 120000    1907            lcall   _add_byte_buff
076C           1908   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:419: add_byte_buff((PC_save/0x100), 52);
076C 904BD0    1909            mov     dptr,#_PC_save
076F E0        1910            movx    a,@dptr
0770 A3        1911            inc     dptr
0771 E0        1912            movx    a,@dptr
0772 F582      1913            mov     dpl,a
0774 756034    1914            mov     _add_byte_buff_PARM_2,#0x34
0777 120000    1915            lcall   _add_byte_buff
077A           1916   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:420: add_byte_buff((PC_save%0x100), 54);
077A 904BD0    1917            mov     dptr,#_PC_save
077D E0        1918            movx    a,@dptr
077E FA        1919            mov     r2,a
077F A3        1920            inc     dptr
0780 E0        1921            movx    a,@dptr
0781 8A82      1922            mov     dpl,r2
0783 756036    1923            mov     _add_byte_buff_PARM_2,#0x36
0786 120000    1924            lcall   _add_byte_buff
0789           1925   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:422: bank=(PSW_save/0x8)&0x3;
0789 904DD0    1926            mov     dptr,#_PSW_save
078C E0        1927            movx    a,@dptr
078D C4        1928            swap    a
078E 23        1929            rl      a
078F           1930   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:423: for(j=0; j<8; j++)
078F 5403      1931            anl     a,#(0x1f&0x03)
0791 FA        1932            mov     r2,a
0792 C4        1933            swap    a
0793 03        1934            rr      a
0794 54F8      1935            anl     a,#0xf8
0796 FB        1936            mov     r3,a
0797 7C00      1937            mov     r4,#0x00
0799           1938   L018001?:
0799 BC0890    1939            cjne    r4,#0x08,L018010?
079C           1940   L018010?:
079C 5000      1941            jnc     L018004?
079E           1942   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:425: add_byte_buff(iram_save[j+bank*8], 58+3+(7*j));
079E EB        1943            mov     a,r3
079F 2C        1944            add     a,r4
07A0 2490      1945            add     a,#_iram_save
07A2 F582      1946            mov     dpl,a
07A4 E4        1947            clr     a
07A5 344E      1948            addc    a,#(_iram_save >> 8)
07A7 F583      1949            mov     dph,a
07A9 E0        1950            movx    a,@dptr
07AA FD        1951            mov     r5,a
07AB EC        1952            mov     a,r4
07AC 75F007    1953            mov     b,#0x07
07AF A4        1954            mul     ab
07B0 243D      1955            add     a,#0x3D
07B2 F560      1956            mov     _add_byte_buff_PARM_2,a
07B4 8D82      1957            mov     dpl,r5
07B6 C002      1958            push    ar2
07B8 C003      1959            push    ar3
07BA C004      1960            push    ar4
07BC 120000    1961            lcall   _add_byte_buff
07BF D004      1962            pop     ar4
07C1 D003      1963            pop     ar3
07C3 D002      1964            pop     ar2
07C5           1965   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:423: for(j=0; j<8; j++)
07C5 0C        1966            inc     r4
07C6 8000      1967            sjmp    L018001?
07C8           1968   L018004?:
07C8           1969   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:427: txbuff[58+61]=('0'+bank);
07C8 7430      1970            mov     a,#0x30
07CA 2A        1971            add     a,r2
07CB 908178    1972            mov     dptr,#(_txbuff + 0x0077)
07CE F0        1973            movx    @dptr,a
07CF           1974   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:429: append_txbuff=1;
07CF D200      1975            setb    _append_txbuff
07D1           1976   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:430: discnt=1;
07D1 750001    1977            mov     _discnt,#0x01
07D4 E4        1978            clr     a
07D5 F501      1979            mov     (_discnt + 1),a
07D7           1980   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:431: unassemble(PC_save); //The next assembly instruction...
07D7 904BD0    1981            mov     dptr,#_PC_save
07DA E0        1982            movx    a,@dptr
07DB FA        1983            mov     r2,a
07DC A3        1984            inc     dptr
07DD E0        1985            movx    a,@dptr
07DE FB        1986            mov     r3,a
07DF 8A82      1987            mov     dpl,r2
07E1 8B83      1988            mov     dph,r3
07E3 120000    1989            lcall   _unassemble
07E6           1990   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:432: append_txbuff=0;
07E6 C200      1991            clr     _append_txbuff
07E8           1992   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:433: add_nlcursor_txbuff();
07E8 120000    1993            lcall   _add_nlcursor_txbuff
07EB           1994   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:434: flush_txbuff();
07EB 020000    1995            ljmp    _flush_txbuff
07EE           1996   ;------------------------------------------------------------
07EE           1997   ;Allocation info for local variables in function 'nlist'
07EE           1998   ;------------------------------------------------------------
07EE           1999   ;slist                     Allocated to registers r2 r3 r4 
07EE           2000   ;x                         Allocated to registers r5 
07EE           2001   ;q                         Allocated with name '_nlist_q_1_151'
07EE           2002   ;sloc0                     Allocated with name '_nlist_sloc0_1_0'
07EE           2003   ;------------------------------------------------------------
07EE           2004   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:437: unsigned char nlist (unsigned char * slist)
07EE           2005   ;        -----------------------------------------
07EE           2006   ;         function nlist
07EE           2007   ;        -----------------------------------------
07EE           2008   _nlist:
07EE AA82      2009            mov     r2,dpl
07F0 AB83      2010            mov     r3,dph
07F2 ACF0      2011            mov     r4,b
07F4           2012   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:439: unsigned char x=0xff, q;
07F4 7DFF      2013            mov     r5,#0xFF
07F6           2014   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:441: while(*slist)
07F6           2015   L019006?:
07F6 8A82      2016            mov     dpl,r2
07F8 8B83      2017            mov     dph,r3
07FA 8CF0      2018            mov     b,r4
07FC 120000    2019            lcall   __gptrget
07FF FE        2020            mov     r6,a
0800 6000      2021            jz      L019008?
0802           2022   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:443: if((*slist)>0x7f)
0802 EE        2023            mov     a,r6
0803 2480      2024            add     a,#0xff - 0x7F
0805 5000      2025            jnc     L019005?
0807           2026   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:445: x=*(slist++);
0807 8E05      2027            mov     ar5,r6
0809 0A        2028            inc     r2
080A BA0090    2029            cjne    r2,#0x00,L019029?
080D 0B        2030            inc     r3
080E           2031   L019029?:
080E           2032   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:446: for(q=0; (*slist<=0x7f) && (*slist==(unsigned char)buff[q]) ; q++) slist++;
080E 8AE8      2033            mov     _nlist_sloc0_1_0,r2
0810 8BE9      2034            mov     (_nlist_sloc0_1_0 + 1),r3
0812 8CEA      2035            mov     (_nlist_sloc0_1_0 + 2),r4
0814 759800    2036            mov     _nlist_q_1_151,#0x00
0817           2037   L019012?:
0817 85E882    2038            mov     dpl,_nlist_sloc0_1_0
081A 85E983    2039            mov     dph,(_nlist_sloc0_1_0 + 1)
081D 85EAF0    2040            mov     b,(_nlist_sloc0_1_0 + 2)
0820 120000    2041            lcall   __gptrget
0823 FF        2042            mov  r7,a
0824 2480      2043            add     a,#0xff - 0x7F
0826 4000      2044            jc      L019026?
0828 E598      2045            mov     a,_nlist_q_1_151
082A 2420      2046            add     a,#_buff
082C F8        2047            mov     r0,a
082D 8606      2048            mov     ar6,@r0
082F EF        2049            mov     a,r7
0830 B50610    2050            cjne    a,ar6,L019026?
0833 05E8      2051            inc     _nlist_sloc0_1_0
0835 E4        2052            clr     a
0836 B5E850    2053            cjne    a,_nlist_sloc0_1_0,L019033?
0839 05E9      2054            inc     (_nlist_sloc0_1_0 + 1)
083B           2055   L019033?:
083B 0598      2056            inc     _nlist_q_1_151
083D 8000      2057            sjmp    L019012?
083F           2058   L019026?:
083F AAE8      2059            mov     r2,_nlist_sloc0_1_0
0841 ABE9      2060            mov     r3,(_nlist_sloc0_1_0 + 1)
0843 ACEA      2061            mov     r4,(_nlist_sloc0_1_0 + 2)
0845           2062   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:447: if((*slist>0x7f)&&(buff[q]==0)) break;
0845 85E882    2063            mov     dpl,_nlist_sloc0_1_0
0848 85E983    2064            mov     dph,(_nlist_sloc0_1_0 + 1)
084B 85EAF0    2065            mov     b,(_nlist_sloc0_1_0 + 2)
084E 120000    2066            lcall   __gptrget
0851 FE        2067            mov  r6,a
0852 2480      2068            add     a,#0xff - 0x7F
0854 5000      2069            jnc     L019005?
0856 E598      2070            mov     a,_nlist_q_1_151
0858 2420      2071            add     a,#_buff
085A F8        2072            mov     r0,a
085B E6        2073            mov     a,@r0
085C 6000      2074            jz      L019008?
085E           2075   L019005?:
085E           2076   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:449: slist++;
085E 0A        2077            inc     r2
085F BA00D0    2078            cjne    r2,#0x00,L019006?
0862 0B        2079            inc     r3
0863 8000      2080            sjmp    L019006?
0865           2081   L019008?:
0865           2082   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:451: if(*slist) return x;//Found one!
0865 8A82      2083            mov     dpl,r2
0867 8B83      2084            mov     dph,r3
0869 8CF0      2085            mov     b,r4
086B 120000    2086            lcall   __gptrget
086E 6000      2087            jz      L019010?
0870 8D82      2088            mov     dpl,r5
0872           2089   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:452: return 0xff; //What if a sfr is located at 0xff?
0872 22        2090            ret
0873           2091   L019010?:
0873 7582FF    2092            mov     dpl,#0xFF
0876 22        2093            ret
0877           2094   ;------------------------------------------------------------
0877           2095   ;Allocation info for local variables in function 'breakorstep'
0877           2096   ;------------------------------------------------------------
0877           2097   ;n                         Allocated to registers r2 
0877           2098   ;------------------------------------------------------------
0877           2099   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:455: void breakorstep (void)
0877           2100   ;        -----------------------------------------
0877           2101   ;         function breakorstep
0877           2102   ;        -----------------------------------------
0877           2103   _breakorstep:
0877           2104   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:459: gotbreak=0;
0877 904B90    2105            mov     dptr,#_gotbreak
087A E4        2106            clr     a
087B F0        2107            movx    @dptr,a
087C           2108   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:460: breakpoint=0;
087C C2D0      2109            clr     _breakpoint
087E           2110   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:462: if(go_pending==0x55)
087E 9017E0    2111            mov     dptr,#_go_pending
0881 E0        2112            movx    a,@dptr
0882 FA        2113            mov     r2,a
0883 BA55D0    2114            cjne    r2,#0x55,L020002?
0886           2115   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:464: go_pending=0xaa;
0886 9017E0    2116            mov     dptr,#_go_pending
0889 74AA      2117            mov     a,#0xAA
088B F0        2118            movx    @dptr,a
088C           2119   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:465: step_start=PC_save; //Next instruction to be executed
088C 904BD0    2120            mov     dptr,#_PC_save
088F E0        2121            movx    a,@dptr
0890 FA        2122            mov     r2,a
0891 A3        2123            inc     dptr
0892 E0        2124            movx    a,@dptr
0893 FB        2125            mov     r3,a
0894 904B50    2126            mov     dptr,#_step_start
0897 EA        2127            mov     a,r2
0898 F0        2128            movx    @dptr,a
0899 A3        2129            inc     dptr
089A EB        2130            mov     a,r3
089B F0        2131            movx    @dptr,a
089C           2132   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:466: gotbreak=0; //If changes to 1, the single step function worked!
089C 904B90    2133            mov     dptr,#_gotbreak
089F E4        2134            clr     a
08A0 F0        2135            movx    @dptr,a
08A1           2136   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:467: gostep=1;
08A1 9018A0    2137            mov     dptr,#_gostep
08A4 7401      2138            mov     a,#0x01
08A6 F0        2139            movx    @dptr,a
08A7           2140   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:468: dostep();
08A7 120000    2141            lcall   _dostep
08AA           2142   L020002?:
08AA           2143   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:470: go_pending=0xaa;   
08AA 9017E0    2144            mov     dptr,#_go_pending
08AD 74AA      2145            mov     a,#0xAA
08AF F0        2146            movx    @dptr,a
08B0           2147   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:472: if (trace_type)
08B0 901820    2148            mov     dptr,#_trace_type
08B3 E0        2149            movx    a,@dptr
08B4 FA        2150            mov     r2,a
08B5 7000      2151            jnz     L020043?
08B7 020000    2152            ljmp    L020017?
08BA           2153   L020043?:
08BA           2154   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:474: if(trace_type==1) //Run in trace mode until a breapoint is hit
08BA 901820    2155            mov     dptr,#_trace_type
08BD E0        2156            movx    a,@dptr
08BE FA        2157            mov     r2,a
08BF BA01D0    2158            cjne    r2,#0x01,L020006?
08C2           2159   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:476: for (n=0; n<4; n++)
08C2 7A00      2160            mov     r2,#0x00
08C4           2161   L020021?:
08C4 BA0450    2162            cjne    r2,#0x04,L020046?
08C7           2163   L020046?:
08C7 5000      2164            jnc     L020006?
08C9           2165   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:478: if(br[n]==PC_save)
08C9 EA        2166            mov     a,r2
08CA 2A        2167            add     a,r2
08CB 2450      2168            add     a,#_br
08CD F582      2169            mov     dpl,a
08CF E4        2170            clr     a
08D0 344E      2171            addc    a,#(_br >> 8)
08D2 F583      2172            mov     dph,a
08D4 E0        2173            movx    a,@dptr
08D5 FB        2174            mov     r3,a
08D6 A3        2175            inc     dptr
08D7 E0        2176            movx    a,@dptr
08D8 FC        2177            mov     r4,a
08D9 904BD0    2178            mov     dptr,#_PC_save
08DC E0        2179            movx    a,@dptr
08DD FD        2180            mov     r5,a
08DE A3        2181            inc     dptr
08DF E0        2182            movx    a,@dptr
08E0 FE        2183            mov     r6,a
08E1 EB        2184            mov     a,r3
08E2 B50590    2185            cjne    a,ar5,L020023?
08E5 EC        2186            mov     a,r4
08E6 B50690    2187            cjne    a,ar6,L020023?
08E9           2188   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:480: breakpoint=1;
08E9 D2D0      2189            setb    _breakpoint
08EB           2190   L020023?:
08EB           2191   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:476: for (n=0; n<4; n++)
08EB 0A        2192            inc     r2
08EC 8000      2193            sjmp    L020021?
08EE           2194   L020006?:
08EE           2195   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:484: if ((break_address!=PC_save))
08EE 901860    2196            mov     dptr,#_break_address
08F1 E0        2197            movx    a,@dptr
08F2 FA        2198            mov     r2,a
08F3 A3        2199            inc     dptr
08F4 E0        2200            movx    a,@dptr
08F5 FB        2201            mov     r3,a
08F6 904BD0    2202            mov     dptr,#_PC_save
08F9 E0        2203            movx    a,@dptr
08FA FC        2204            mov     r4,a
08FB A3        2205            inc     dptr
08FC E0        2206            movx    a,@dptr
08FD FD        2207            mov     r5,a
08FE EA        2208            mov     a,r2
08FF B504D0    2209            cjne    a,ar4,L020050?
0902 EB        2210            mov     a,r3
0903 B505D0    2211            cjne    a,ar5,L020050?
0906 8000      2212            sjmp    L020017?
0908           2213   L020050?:
0908           2214   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:486: if (trace_type>=2)
0908 901820    2215            mov     dptr,#_trace_type
090B E0        2216            movx    a,@dptr
090C FA        2217            mov     r2,a
090D BA0210    2218            cjne    r2,#0x02,L020051?
0910           2219   L020051?:
0910 4000      2220            jc      L020008?
0912           2221   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:488: discnt=1;
0912 750001    2222            mov     _discnt,#0x01
0915 E4        2223            clr     a
0916 F501      2224            mov     (_discnt + 1),a
0918           2225   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:489: unassemble(step_start); //The executed assembly instruction...
0918 904B50    2226            mov     dptr,#_step_start
091B E0        2227            movx    a,@dptr
091C FA        2228            mov     r2,a
091D A3        2229            inc     dptr
091E E0        2230            movx    a,@dptr
091F FB        2231            mov     r3,a
0920 8A82      2232            mov     dpl,r2
0922 8B83      2233            mov     dph,r3
0924 120000    2234            lcall   _unassemble
0927           2235   L020008?:
0927           2236   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:491: if((JRXRDY==0)&&(breakpoint==0))
0927 20C090    2237            jb      _JRXRDY,L020017?
092A 20D090    2238            jb      _breakpoint,L020017?
092D           2239   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:493: if(trace_type==3) disp_regs();
092D 901820    2240            mov     dptr,#_trace_type
0930 E0        2241            movx    a,@dptr
0931 FA        2242            mov     r2,a
0932 BA0390    2243            cjne    r2,#0x03,L020010?
0935 120000    2244            lcall   _disp_regs
0938           2245   L020010?:
0938           2246   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:494: step_start=PC_save;
0938 904BD0    2247            mov     dptr,#_PC_save
093B E0        2248            movx    a,@dptr
093C FA        2249            mov     r2,a
093D A3        2250            inc     dptr
093E E0        2251            movx    a,@dptr
093F FB        2252            mov     r3,a
0940 904B50    2253            mov     dptr,#_step_start
0943 EA        2254            mov     a,r2
0944 F0        2255            movx    @dptr,a
0945 A3        2256            inc     dptr
0946 EB        2257            mov     a,r3
0947 F0        2258            movx    @dptr,a
0948           2259   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:495: dostep();
0948 120000    2260            lcall   _dostep
094B           2261   L020017?:
094B           2262   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:499: if((trace_type>=2) && (RI==0))
094B 901820    2263            mov     dptr,#_trace_type
094E E0        2264            movx    a,@dptr
094F FA        2265            mov     r2,a
0950 BA02D0    2266            cjne    r2,#0x02,L020057?
0953           2267   L020057?:
0953 4000      2268            jc      L020019?
0955 209810    2269            jb      _RI,L020019?
0958           2270   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:501: discnt=1;
0958 750001    2271            mov     _discnt,#0x01
095B E4        2272            clr     a
095C F501      2273            mov     (_discnt + 1),a
095E           2274   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:502: unassemble(step_start); //The executed assembly instruction...
095E 904B50    2275            mov     dptr,#_step_start
0961 E0        2276            movx    a,@dptr
0962 FA        2277            mov     r2,a
0963 A3        2278            inc     dptr
0964 E0        2279            movx    a,@dptr
0965 FB        2280            mov     r3,a
0966 8A82      2281            mov     dpl,r2
0968 8B83      2282            mov     dph,r3
096A 120000    2283            lcall   _unassemble
096D           2284   L020019?:
096D           2285   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:505: disp_regs();
096D 020000    2286            ljmp    _disp_regs
0970           2287   ;------------------------------------------------------------
0970           2288   ;Allocation info for local variables in function 'do_cmd'
0970           2289   ;------------------------------------------------------------
0970           2290   ;i                         Allocated with name '_do_cmd_i_1_166'
0970           2291   ;j                         Allocated with name '_do_cmd_j_1_166'
0970           2292   ;n                         Allocated with name '_do_cmd_n_1_166'
0970           2293   ;p                         Allocated to registers r4 r5 
0970           2294   ;q                         Allocated with name '_do_cmd_q_1_166'
0970           2295   ;c                         Allocated to registers r6 
0970           2296   ;d                         Allocated to registers r2 
0970           2297   ;x                         Allocated to registers r7 
0970           2298   ;y                         Allocated with name '_do_cmd_y_1_166'
0970           2299   ;cmd                       Allocated with name '_do_cmd_cmd_1_166'
0970           2300   ;sloc0                     Allocated with name '_do_cmd_sloc0_1_0'
0970           2301   ;------------------------------------------------------------
0970           2302   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:508: void do_cmd (void)
0970           2303   ;        -----------------------------------------
0970           2304   ;         function do_cmd
0970           2305   ;        -----------------------------------------
0970           2306   _do_cmd:
0970           2307   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:516: append_txbuff=0;
0970 C200      2308            clr     _append_txbuff
0972           2309   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:518: if (gotbreak!=1) //Power-on reset
0972 904B90    2310            mov     dptr,#_gotbreak
0975 E0        2311            movx    a,@dptr
0976 FA        2312            mov     r2,a
0977 BA0150    2313            cjne    r2,#0x01,L021320?
097A 8000      2314            sjmp    L021002?
097C           2315   L021320?:
097C           2316   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:520: txcount=0;
097C 908100    2317            mov     dptr,#_txcount
097F E4        2318            clr     a
0980 F0        2319            movx    @dptr,a
0981           2320   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:521: putsp(BANNER);
0981 90AFD0    2321            mov     dptr,#__str_3
0984 75F080    2322            mov     b,#0x80
0987 120000    2323            lcall   _putsp
098A           2324   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:522: SP_save=7; //Default user stack location
098A 904C90    2325            mov     dptr,#_SP_save
098D 7407      2326            mov     a,#0x07
098F F0        2327            movx    @dptr,a
0990           2328   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:523: LEDRA_save=0xff;
0990 904C50    2329            mov     dptr,#_LEDRA_save
0993 74FF      2330            mov     a,#0xFF
0995 F0        2331            movx    @dptr,a
0996           2332   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:524: LEDRB_save=0xff;
0996 904C10    2333            mov     dptr,#_LEDRB_save
0999 74FF      2334            mov     a,#0xFF
099B F0        2335            movx    @dptr,a
099C           2336   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:525: restorePC();
099C 120000    2337            lcall   _restorePC
099F           2338   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:526: cmd=0;
099F 750800    2339            mov     _do_cmd_cmd_1_166,#0x00
09A2 8000      2340            sjmp    L021220?
09A4           2341   L021002?:
09A4           2342   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:528: else breakorstep(); //Got here from the beak/step interrupt
09A4 120000    2343            lcall   _breakorstep
09A7           2344   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:530: while(1)
09A7           2345   L021220?:
09A7           2346   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:532: fillmem(buff, BUFFSIZE, 0);;
09A7 75E020    2347            mov     _fillmem_PARM_2,#0x20
09AA E4        2348            clr     a
09AB F5E1      2349            mov     (_fillmem_PARM_2 + 1),a
09AD 75A000    2350            mov     _fillmem_PARM_3,#0x00
09B0 905120    2351            mov     dptr,#_buff
09B3 75F040    2352            mov     b,#0x40
09B6 120000    2353            lcall   _fillmem
09B9           2354   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:533: getsn();
09B9 120000    2355            lcall   _getsn
09BC           2356   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:534: cleanbuff();
09BC 120000    2357            lcall   _cleanbuff
09BF           2358   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:535: break_address=0;
09BF 901860    2359            mov     dptr,#_break_address
09C2 E4        2360            clr     a
09C3 F0        2361            movx    @dptr,a
09C4 A3        2362            inc     dptr
09C5 F0        2363            movx    @dptr,a
09C6           2364   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:536: trace_type=0;
09C6 901820    2365            mov     dptr,#_trace_type
09C9 E4        2366            clr     a
09CA F0        2367            movx    @dptr,a
09CB           2368   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:539: cursor=0;
09CB 75E000    2369            mov     _cursor,#0x00
09CE           2370   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:540: getwordn();   //skip the command name
09CE 120000    2371            lcall   _getwordn
09D1           2372   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:541: n=getwordn(); //n is the first parameter/number
09D1 120000    2373            lcall   _getwordn
09D4 858238    2374            mov     _do_cmd_n_1_166,dpl
09D7 858339    2375            mov     (_do_cmd_n_1_166 + 1),dph
09DA           2376   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:542: p=getwordn(); //p is the second parameter/number
09DA 120000    2377            lcall   _getwordn
09DD AC82      2378            mov     r4,dpl
09DF AD83      2379            mov     r5,dph
09E1           2380   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:543: q=getwordn(); //q is the third parameter/number
09E1 C004      2381            push    ar4
09E3 C005      2382            push    ar5
09E5 120000    2383            lcall   _getwordn
09E8 858278    2384            mov     _do_cmd_q_1_166,dpl
09EB 858379    2385            mov     (_do_cmd_q_1_166 + 1),dph
09EE D005      2386            pop     ar5
09F0 D004      2387            pop     ar4
09F2           2388   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:544: i=n&0xfff0;
09F2 74F0      2389            mov     a,#0xF0
09F4 5538      2390            anl     a,_do_cmd_n_1_166
09F6 F5B8      2391            mov     _do_cmd_i_1_166,a
09F8 8539B9    2392            mov     (_do_cmd_i_1_166 + 1),(_do_cmd_n_1_166 + 1)
09FB           2393   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:545: j=(p+15)&0xfff0;
09FB 740F      2394            mov     a,#0x0F
09FD 2C        2395            add     a,r4
09FE FE        2396            mov     r6,a
09FF E4        2397            clr     a
0A00 3D        2398            addc    a,r5
0A01 FF        2399            mov     r7,a
0A02 74F0      2400            mov     a,#0xF0
0A04 5E        2401            anl     a,r6
0A05 F5F8      2402            mov     _do_cmd_j_1_166,a
0A07 8FF9      2403            mov     (_do_cmd_j_1_166 + 1),r7
0A09           2404   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:546: c=n; // Sometimes for the first parameter we need an unsigned char
0A09 AE38      2405            mov     r6,_do_cmd_n_1_166
0A0B           2406   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:547: p_bit=(p==0?0:1);
0A0B EC        2407            mov     a,r4
0A0C 4D        2408            orl     a,r5
0A0D 24FF      2409            add     a,#0xff
0A0F 9238      2410            mov     _do_cmd_p_bit_1_166,c
0A11           2411   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:549: cmd=nlist(cmdlst)&0x7f;
0A11 9013A0    2412            mov     dptr,#_cmdlst
0A14 75F080    2413            mov     b,#0x80
0A17 C004      2414            push    ar4
0A19 C005      2415            push    ar5
0A1B C006      2416            push    ar6
0A1D 120000    2417            lcall   _nlist
0A20 E582      2418            mov     a,dpl
0A22 D006      2419            pop     ar6
0A24 D005      2420            pop     ar5
0A26 D004      2421            pop     ar4
0A28 547F      2422            anl     a,#0x7F
0A2A F508      2423            mov     _do_cmd_cmd_1_166,a
0A2C           2424   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:551: switch(cmd)
0A2C E508      2425            mov     a,_do_cmd_cmd_1_166
0A2E FF        2426            mov     r7,a
0A2F 24D1      2427            add     a,#0xff - 0x2E
0A31 5000      2428            jnc     L021321?
0A33 020000    2429            ljmp    L021156?
0A36           2430   L021321?:
0A36 EF        2431            mov     a,r7
0A37           2432   L021324?:
0A37 243D      2433            add     a,#(L021322?-3-L021324?)
0A39 83        2434            movc    a,@a+pc
0A3A C0E0      2435            push    acc
0A3C EF        2436            mov     a,r7
0A3D           2437   L021325?:
0A3D 243D      2438            add     a,#(L021323?-3-L021325?)
0A3F 83        2439            movc    a,@a+pc
0A40 C0E0      2440            push    acc
0A42 22        2441            ret
0A43           2442   L021322?:
0A43 50        2443            db      L021005?
0A44 90        2444            db      L021006?
0A45 D0        2445            db      L021007?
0A46 10        2446            db      L021008?
0A47 50        2447            db      L021009?
0A48 90        2448            db      L021010?
0A49 D0        2449            db      L021011?
0A4A 10        2450            db      L021012?
0A4B 50        2451            db      L021013?
0A4C 90        2452            db      L021014?
0A4D D0        2453            db      L021017?
0A4E 10        2454            db      L021023?
0A4F 50        2455            db      L021024?
0A50 90        2456            db      L021025?
0A51 D0        2457            db      L021026?
0A52 10        2458            db      L021027?
0A53 50        2459            db      L021031?
0A54 90        2460            db      L021019?
0A55 D0        2461            db      L021035?
0A56 10        2462            db      L021036?
0A57 50        2463            db      L021037?
0A58 90        2464            db      L021038?
0A59 D0        2465            db      L021039?
0A5A 10        2466            db      L021040?
0A5B 50        2467            db      L021041?
0A5C 90        2468            db      L021042?
0A5D D0        2469            db      L021018?
0A5E 10        2470            db      L021022?
0A5F 50        2471            db      L021046?
0A60 90        2472            db      L021049?
0A61 D0        2473            db      L021050?
0A62 10        2474            db      L021051?
0A63 50        2475            db      L021055?
0A64 90        2476            db      L021056?
0A65 D0        2477            db      L021057?
0A66 D0        2478            db      L021156?
0A67 10        2479            db      L021058?
0A68 50        2480            db      L021088?
0A69 D0        2481            db      L021156?
0A6A 90        2482            db      L021095?
0A6B D0        2483            db      L021096?
0A6C 10        2484            db      L021140?
0A6D D0        2485            db      L021156?
0A6E 50        2486            db      L021147?
0A6F 90        2487            db      L021015?
0A70 D0        2488            db      L021016?
0A71 10        2489            db      L021004?
0A72           2490   L021323?:
0A72 B2        2491            db      L021005?>>8
0A73 B2        2492            db      L021006?>>8
0A74 B2        2493            db      L021007?>>8
0A75 B3        2494            db      L021008?>>8
0A76 B3        2495            db      L021009?>>8
0A77 B3        2496            db      L021010?>>8
0A78 B3        2497            db      L021011?>>8
0A79 B4        2498            db      L021012?>>8
0A7A B4        2499            db      L021013?>>8
0A7B B4        2500            db      L021014?>>8
0A7C B4        2501            db      L021017?>>8
0A7D B5        2502            db      L021023?>>8
0A7E B5        2503            db      L021024?>>8
0A7F B5        2504            db      L021025?>>8
0A80 B5        2505            db      L021026?>>8
0A81 B6        2506            db      L021027?>>8
0A82 B6        2507            db      L021031?>>8
0A83 B6        2508            db      L021019?>>8
0A84 B6        2509            db      L021035?>>8
0A85 B7        2510            db      L021036?>>8
0A86 B7        2511            db      L021037?>>8
0A87 B7        2512            db      L021038?>>8
0A88 B7        2513            db      L021039?>>8
0A89 B8        2514            db      L021040?>>8
0A8A B8        2515            db      L021041?>>8
0A8B B8        2516            db      L021042?>>8
0A8C B8        2517            db      L021018?>>8
0A8D B9        2518            db      L021022?>>8
0A8E B9        2519            db      L021046?>>8
0A8F B9        2520            db      L021049?>>8
0A90 B9        2521            db      L021050?>>8
0A91 BA        2522            db      L021051?>>8
0A92 BA        2523            db      L021055?>>8
0A93 BA        2524            db      L021056?>>8
0A94 BA        2525            db      L021057?>>8
0A95 B0        2526            db      L021156?>>8
0A96 BB        2527            db      L021058?>>8
0A97 BB        2528            db      L021088?>>8
0A98 B0        2529            db      L021156?>>8
0A99 BB        2530            db      L021095?>>8
0A9A BB        2531            db      L021096?>>8
0A9B BC        2532            db      L021140?>>8
0A9C B0        2533            db      L021156?>>8
0A9D BC        2534            db      L021147?>>8
0A9E BC        2535            db      L021015?>>8
0A9F BC        2536            db      L021016?>>8
0AA0 BD        2537            db      L021004?>>8
0AA1           2538   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:553: case ID_nothing:
0AA1           2539   L021004?:
0AA1           2540   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:554: break;
0AA1 020000    2541            ljmp    L021220?
0AA4           2542   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:556: case ID_display_data:
0AA4           2543   L021005?:
0AA4           2544   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:557: dispmem(iram_save, 0, 'D');
0AA4 E4        2545            clr     a
0AA5 F550      2546            mov     _dispmem_PARM_2,a
0AA7 F551      2547            mov     (_dispmem_PARM_2 + 1),a
0AA9 751044    2548            mov     _dispmem_PARM_3,#0x44
0AAC 904E90    2549            mov     dptr,#_iram_save
0AAF 75F000    2550            mov     b,#0x00
0AB2 120000    2551            lcall   _dispmem
0AB5           2552   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:558: break;
0AB5 020000    2553            ljmp    L021220?
0AB8           2554   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:560: case ID_modify_data:
0AB8           2555   L021006?:
0AB8           2556   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:561: modifymem(&iram_save[n&0x7f], 'D');
0AB8 747F      2557            mov     a,#0x7F
0ABA 5538      2558            anl     a,_do_cmd_n_1_166
0ABC 7A00      2559            mov     r2,#0x00
0ABE 2490      2560            add     a,#_iram_save
0AC0 FF        2561            mov     r7,a
0AC1 EA        2562            mov     a,r2
0AC2 344E      2563            addc    a,#(_iram_save >> 8)
0AC4 FA        2564            mov     r2,a
0AC5 7B00      2565            mov     r3,#0x00
0AC7 75A044    2566            mov     _modifymem_PARM_2,#0x44
0ACA 8F82      2567            mov     dpl,r7
0ACC 8A83      2568            mov     dph,r2
0ACE 8BF0      2569            mov     b,r3
0AD0 120000    2570            lcall   _modifymem
0AD3           2571   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:562: break;
0AD3 020000    2572            ljmp    L021220?
0AD6           2573   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:564: case ID_fill_data:
0AD6           2574   L021007?:
0AD6           2575   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:565: fillmem(&iram_save[n&0x7f], (p>0x80)?0x80:p, (unsigned char) q);
0AD6 747F      2576            mov     a,#0x7F
0AD8 5538      2577            anl     a,_do_cmd_n_1_166
0ADA 7B00      2578            mov     r3,#0x00
0ADC 2490      2579            add     a,#_iram_save
0ADE FA        2580            mov     r2,a
0ADF EB        2581            mov     a,r3
0AE0 344E      2582            addc    a,#(_iram_save >> 8)
0AE2 FB        2583            mov     r3,a
0AE3 7F00      2584            mov     r7,#0x00
0AE5 C3        2585            clr     c
0AE6 7480      2586            mov     a,#0x80
0AE8 9C        2587            subb    a,r4
0AE9 E4        2588            clr     a
0AEA 9D        2589            subb    a,r5
0AEB 5000      2590            jnc     L021232?
0AED 755880    2591            mov     _do_cmd_sloc0_1_0,#0x80
0AF0 E4        2592            clr     a
0AF1 F559      2593            mov     (_do_cmd_sloc0_1_0 + 1),a
0AF3 8000      2594            sjmp    L021233?
0AF5           2595   L021232?:
0AF5 8C58      2596            mov     _do_cmd_sloc0_1_0,r4
0AF7 8D59      2597            mov     (_do_cmd_sloc0_1_0 + 1),r5
0AF9           2598   L021233?:
0AF9 8578A0    2599            mov     _fillmem_PARM_3,_do_cmd_q_1_166
0AFC 8558E0    2600            mov     _fillmem_PARM_2,_do_cmd_sloc0_1_0
0AFF 8559E1    2601            mov     (_fillmem_PARM_2 + 1),(_do_cmd_sloc0_1_0 + 1)
0B02 8A82      2602            mov     dpl,r2
0B04 8B83      2603            mov     dph,r3
0B06 8FF0      2604            mov     b,r7
0B08 120000    2605            lcall   _fillmem
0B0B           2606   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:566: break;
0B0B 020000    2607            ljmp    L021220?
0B0E           2608   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:568: case ID_display_idata:
0B0E           2609   L021008?:
0B0E           2610   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:569: dispmem((unsigned char data *)(0x80), 0, 'I');
0B0E E4        2611            clr     a
0B0F F550      2612            mov     _dispmem_PARM_2,a
0B11 F551      2613            mov     (_dispmem_PARM_2 + 1),a
0B13 751049    2614            mov     _dispmem_PARM_3,#0x49
0B16 904080    2615            mov     dptr,#0x4080
0B19 75F000    2616            mov     b,#0x00
0B1C 120000    2617            lcall   _dispmem
0B1F           2618   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:570: break;
0B1F 020000    2619            ljmp    L021220?
0B22           2620   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:572: case ID_modify_idata:
0B22           2621   L021009?:
0B22           2622   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:573: modifymem((unsigned char data *)((n&0x7f)|0x80), 'I');
0B22 747F      2623            mov     a,#0x7F
0B24 5538      2624            anl     a,_do_cmd_n_1_166
0B26 FA        2625            mov     r2,a
0B27 430280    2626            orl     ar2,#0x80
0B2A 7B00      2627            mov     r3,#0x00
0B2C 7F40      2628            mov     r7,#0x40
0B2E 75A049    2629            mov     _modifymem_PARM_2,#0x49
0B31 8A82      2630            mov     dpl,r2
0B33 8B83      2631            mov     dph,r3
0B35 8FF0      2632            mov     b,r7
0B37 120000    2633            lcall   _modifymem
0B3A           2634   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:574: break;
0B3A 020000    2635            ljmp    L021220?
0B3D           2636   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:576: case ID_fill_idata:
0B3D           2637   L021010?:
0B3D           2638   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:577: fillmem((unsigned char data *)((n&0x7f)|0x80), p>0x80?0x80:p, (unsigned char) q);
0B3D 747F      2639            mov     a,#0x7F
0B3F 5538      2640            anl     a,_do_cmd_n_1_166
0B41 FA        2641            mov     r2,a
0B42 430280    2642            orl     ar2,#0x80
0B45 7B00      2643            mov     r3,#0x00
0B47 7F40      2644            mov     r7,#0x40
0B49 C3        2645            clr     c
0B4A 7480      2646            mov     a,#0x80
0B4C 9C        2647            subb    a,r4
0B4D E4        2648            clr     a
0B4E 9D        2649            subb    a,r5
0B4F 5000      2650            jnc     L021234?
0B51 755880    2651            mov     _do_cmd_sloc0_1_0,#0x80
0B54 E4        2652            clr     a
0B55 F559      2653            mov     (_do_cmd_sloc0_1_0 + 1),a
0B57 8000      2654            sjmp    L021235?
0B59           2655   L021234?:
0B59 8C58      2656            mov     _do_cmd_sloc0_1_0,r4
0B5B 8D59      2657            mov     (_do_cmd_sloc0_1_0 + 1),r5
0B5D           2658   L021235?:
0B5D 8578A0    2659            mov     _fillmem_PARM_3,_do_cmd_q_1_166
0B60 8558E0    2660            mov     _fillmem_PARM_2,_do_cmd_sloc0_1_0
0B63 8559E1    2661            mov     (_fillmem_PARM_2 + 1),(_do_cmd_sloc0_1_0 + 1)
0B66 8A82      2662            mov     dpl,r2
0B68 8B83      2663            mov     dph,r3
0B6A 8FF0      2664            mov     b,r7
0B6C 120000    2665            lcall   _fillmem
0B6F           2666   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:578: break;
0B6F 020000    2667            ljmp    L021220?
0B72           2668   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:580: case ID_display_xdata:
0B72           2669   L021011?:
0B72           2670   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:581: dispmem((unsigned char xdata *)i, j, 'X');
0B72 AAB8      2671            mov     r2,_do_cmd_i_1_166
0B74 ABB9      2672            mov     r3,(_do_cmd_i_1_166 + 1)
0B76 7F00      2673            mov     r7,#0x00
0B78 85F850    2674            mov     _dispmem_PARM_2,_do_cmd_j_1_166
0B7B 85F951    2675            mov     (_dispmem_PARM_2 + 1),(_do_cmd_j_1_166 + 1)
0B7E 751058    2676            mov     _dispmem_PARM_3,#0x58
0B81 8A82      2677            mov     dpl,r2
0B83 8B83      2678            mov     dph,r3
0B85 8FF0      2679            mov     b,r7
0B87 120000    2680            lcall   _dispmem
0B8A           2681   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:582: break;
0B8A 020000    2682            ljmp    L021220?
0B8D           2683   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:584: case ID_modify_xdata:
0B8D           2684   L021012?:
0B8D           2685   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:585: modifymem((unsigned char xdata *)n, 'X');
0B8D AA38      2686            mov     r2,_do_cmd_n_1_166
0B8F AB39      2687            mov     r3,(_do_cmd_n_1_166 + 1)
0B91 7F00      2688            mov     r7,#0x00
0B93 75A058    2689            mov     _modifymem_PARM_2,#0x58
0B96 8A82      2690            mov     dpl,r2
0B98 8B83      2691            mov     dph,r3
0B9A 8FF0      2692            mov     b,r7
0B9C 120000    2693            lcall   _modifymem
0B9F           2694   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:586: break;
0B9F 020000    2695            ljmp    L021220?
0BA2           2696   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:588: case ID_fill_xdata:
0BA2           2697   L021013?:
0BA2           2698   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:589: fillmem((unsigned char xdata *)n, p, (unsigned char)q);
0BA2 AA38      2699            mov     r2,_do_cmd_n_1_166
0BA4 AB39      2700            mov     r3,(_do_cmd_n_1_166 + 1)
0BA6 7F00      2701            mov     r7,#0x00
0BA8 8578A0    2702            mov     _fillmem_PARM_3,_do_cmd_q_1_166
0BAB 8CE0      2703            mov     _fillmem_PARM_2,r4
0BAD 8DE1      2704            mov     (_fillmem_PARM_2 + 1),r5
0BAF 8A82      2705            mov     dpl,r2
0BB1 8B83      2706            mov     dph,r3
0BB3 8FF0      2707            mov     b,r7
0BB5 120000    2708            lcall   _fillmem
0BB8           2709   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:590: break;
0BB8 020000    2710            ljmp    L021220?
0BBB           2711   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:592: case ID_display_code:
0BBB           2712   L021014?:
0BBB           2713   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:593: dispmem((unsigned char code *)i, j, 'C');
0BBB AAB8      2714            mov     r2,_do_cmd_i_1_166
0BBD ABB9      2715            mov     r3,(_do_cmd_i_1_166 + 1)
0BBF 7F80      2716            mov     r7,#0x80
0BC1 85F850    2717            mov     _dispmem_PARM_2,_do_cmd_j_1_166
0BC4 85F951    2718            mov     (_dispmem_PARM_2 + 1),(_do_cmd_j_1_166 + 1)
0BC7 751043    2719            mov     _dispmem_PARM_3,#0x43
0BCA 8A82      2720            mov     dpl,r2
0BCC 8B83      2721            mov     dph,r3
0BCE 8FF0      2722            mov     b,r7
0BD0 120000    2723            lcall   _dispmem
0BD3           2724   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:594: break;
0BD3 020000    2725            ljmp    L021220?
0BD6           2726   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:596: case ID_modify_code:
0BD6           2727   L021015?:
0BD6           2728   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:597: XRAMUSEDAS=0x01; // 32k RAM accessed as xdata
0BD6 75C301    2729            mov     _XRAMUSEDAS,#0x01
0BD9           2730   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:598: modifymem((unsigned char xdata *)n, 'C');
0BD9 AA38      2731            mov     r2,_do_cmd_n_1_166
0BDB AB39      2732            mov     r3,(_do_cmd_n_1_166 + 1)
0BDD 7F00      2733            mov     r7,#0x00
0BDF 75A043    2734            mov     _modifymem_PARM_2,#0x43
0BE2 8A82      2735            mov     dpl,r2
0BE4 8B83      2736            mov     dph,r3
0BE6 8FF0      2737            mov     b,r7
0BE8 120000    2738            lcall   _modifymem
0BEB           2739   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:599: XRAMUSEDAS=0x00; // 32k RAM accessed as code
0BEB 75C300    2740            mov     _XRAMUSEDAS,#0x00
0BEE           2741   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:600: break;
0BEE 020000    2742            ljmp    L021220?
0BF1           2743   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:602: case ID_fill_code:
0BF1           2744   L021016?:
0BF1           2745   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:603: XRAMUSEDAS=0x01; // 32k RAM accessed as xdata
0BF1 75C301    2746            mov     _XRAMUSEDAS,#0x01
0BF4           2747   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:604: fillmem((unsigned char xdata *)n, p, (unsigned char)q);
0BF4 AA38      2748            mov     r2,_do_cmd_n_1_166
0BF6 AB39      2749            mov     r3,(_do_cmd_n_1_166 + 1)
0BF8 7F00      2750            mov     r7,#0x00
0BFA 8578A0    2751            mov     _fillmem_PARM_3,_do_cmd_q_1_166
0BFD 8CE0      2752            mov     _fillmem_PARM_2,r4
0BFF 8DE1      2753            mov     (_fillmem_PARM_2 + 1),r5
0C01 8A82      2754            mov     dpl,r2
0C03 8B83      2755            mov     dph,r3
0C05 8FF0      2756            mov     b,r7
0C07 120000    2757            lcall   _fillmem
0C0A           2758   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:605: XRAMUSEDAS=0x00; // 32k RAM accessed as code
0C0A 75C300    2759            mov     _XRAMUSEDAS,#0x00
0C0D           2760   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:606: break;
0C0D 020000    2761            ljmp    L021220?
0C10           2762   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:608: case ID_unassemble:
0C10           2763   L021017?:
0C10           2764   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:609: discnt=p;
0C10 8C00      2765            mov     _discnt,r4
0C12 8D01      2766            mov     (_discnt + 1),r5
0C14           2767   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:610: append_txbuff=1;
0C14 D200      2768            setb    _append_txbuff
0C16           2769   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:611: unassemble(n);
0C16 853882    2770            mov     dpl,_do_cmd_n_1_166
0C19 853983    2771            mov     dph,(_do_cmd_n_1_166 + 1)
0C1C 120000    2772            lcall   _unassemble
0C1F           2773   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:612: append_txbuff=0;
0C1F C200      2774            clr     _append_txbuff
0C21           2775   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:613: add_nlcursor_txbuff();
0C21 120000    2776            lcall   _add_nlcursor_txbuff
0C24           2777   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:614: flush_txbuff();
0C24 120000    2778            lcall   _flush_txbuff
0C27           2779   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:615: break;
0C27 020000    2780            ljmp    L021220?
0C2A           2781   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:617: case ID_trace_reg:
0C2A           2782   L021018?:
0C2A           2783   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:618: trace_type++;
0C2A 901820    2784            mov     dptr,#_trace_type
0C2D E0        2785            movx    a,@dptr
0C2E 2401      2786            add     a,#0x01
0C30 F0        2787            movx    @dptr,a
0C31           2788   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:620: case ID_trace:
0C31           2789   L021019?:
0C31           2790   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:621: trace_type++;
0C31 901820    2791            mov     dptr,#_trace_type
0C34 E0        2792            movx    a,@dptr
0C35 2401      2793            add     a,#0x01
0C37 F0        2794            movx    @dptr,a
0C38           2795   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:622: if(n==0) break;
0C38 E538      2796            mov     a,_do_cmd_n_1_166
0C3A 4539      2797            orl     a,(_do_cmd_n_1_166 + 1)
0C3C 7000      2798            jnz     L021328?
0C3E 020000    2799            ljmp    L021220?
0C41           2800   L021328?:
0C41           2801   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:623: break_address=n;
0C41 901860    2802            mov     dptr,#_break_address
0C44 E538      2803            mov     a,_do_cmd_n_1_166
0C46 F0        2804            movx    @dptr,a
0C47 A3        2805            inc     dptr
0C48 E539      2806            mov     a,(_do_cmd_n_1_166 + 1)
0C4A F0        2807            movx    @dptr,a
0C4B           2808   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:624: n=0;
0C4B E4        2809            clr     a
0C4C F538      2810            mov     _do_cmd_n_1_166,a
0C4E F539      2811            mov     (_do_cmd_n_1_166 + 1),a
0C50           2812   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:626: case ID_go_breaks:
0C50           2813   L021022?:
0C50           2814   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:627: trace_type++;
0C50 901820    2815            mov     dptr,#_trace_type
0C53 E0        2816            movx    a,@dptr
0C54 2401      2817            add     a,#0x01
0C56 F0        2818            movx    @dptr,a
0C57           2819   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:628: step_start=(n==0)?PC_save:n; //Next instruction to be executed
0C57 E538      2820            mov     a,_do_cmd_n_1_166
0C59 4539      2821            orl     a,(_do_cmd_n_1_166 + 1)
0C5B B40190    2822            cjne    a,#0x01,L021329?
0C5E           2823   L021329?:
0C5E E4        2824            clr     a
0C5F 33        2825            rlc     a
0C60 FA        2826            mov     r2,a
0C61 6000      2827            jz      L021236?
0C63 904BD0    2828            mov     dptr,#_PC_save
0C66 E0        2829            movx    a,@dptr
0C67 FA        2830            mov     r2,a
0C68 A3        2831            inc     dptr
0C69 E0        2832            movx    a,@dptr
0C6A FB        2833            mov     r3,a
0C6B 8000      2834            sjmp    L021237?
0C6D           2835   L021236?:
0C6D AA38      2836            mov     r2,_do_cmd_n_1_166
0C6F AB39      2837            mov     r3,(_do_cmd_n_1_166 + 1)
0C71           2838   L021237?:
0C71 904B50    2839            mov     dptr,#_step_start
0C74 EA        2840            mov     a,r2
0C75 F0        2841            movx    @dptr,a
0C76 A3        2842            inc     dptr
0C77 EB        2843            mov     a,r3
0C78 F0        2844            movx    @dptr,a
0C79           2845   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:629: gotbreak=0; //If changes to 1, the single step function worked!
0C79 904B90    2846            mov     dptr,#_gotbreak
0C7C           2847   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:630: gostep=0;
0C7C E4        2848            clr     a
0C7D F0        2849            movx    @dptr,a
0C7E 9018A0    2850            mov     dptr,#_gostep
0C81 F0        2851            movx    @dptr,a
0C82           2852   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:631: dostep();
0C82 120000    2853            lcall   _dostep
0C85           2854   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:633: case ID_go:
0C85           2855   L021023?:
0C85           2856   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:634: go_pending=0x55;
0C85 9017E0    2857            mov     dptr,#_go_pending
0C88 7455      2858            mov     a,#0x55
0C8A F0        2859            movx    @dptr,a
0C8B           2860   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:635: case ID_step:
0C8B           2861   L021024?:
0C8B           2862   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:636: step_start=(n==0)?PC_save:n; //Next instruction to be executed
0C8B E538      2863            mov     a,_do_cmd_n_1_166
0C8D 4539      2864            orl     a,(_do_cmd_n_1_166 + 1)
0C8F B40150    2865            cjne    a,#0x01,L021331?
0C92           2866   L021331?:
0C92 E4        2867            clr     a
0C93 33        2868            rlc     a
0C94 FA        2869            mov     r2,a
0C95 6000      2870            jz      L021238?
0C97 904BD0    2871            mov     dptr,#_PC_save
0C9A E0        2872            movx    a,@dptr
0C9B FA        2873            mov     r2,a
0C9C A3        2874            inc     dptr
0C9D E0        2875            movx    a,@dptr
0C9E FB        2876            mov     r3,a
0C9F 8000      2877            sjmp    L021239?
0CA1           2878   L021238?:
0CA1 AA38      2879            mov     r2,_do_cmd_n_1_166
0CA3 AB39      2880            mov     r3,(_do_cmd_n_1_166 + 1)
0CA5           2881   L021239?:
0CA5 904B50    2882            mov     dptr,#_step_start
0CA8 EA        2883            mov     a,r2
0CA9 F0        2884            movx    @dptr,a
0CAA A3        2885            inc     dptr
0CAB EB        2886            mov     a,r3
0CAC F0        2887            movx    @dptr,a
0CAD           2888   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:637: gotbreak=0; //If changes to 1, the single step function worked!
0CAD 904B90    2889            mov     dptr,#_gotbreak
0CB0           2890   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:638: gostep=0;
0CB0 E4        2891            clr     a
0CB1 F0        2892            movx    @dptr,a
0CB2 9018A0    2893            mov     dptr,#_gostep
0CB5 F0        2894            movx    @dptr,a
0CB6           2895   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:639: dostep();
0CB6 120000    2896            lcall   _dostep
0CB9           2897   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:640: break;
0CB9 020000    2898            ljmp    L021220?
0CBC           2899   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:642: case ID_registers:
0CBC           2900   L021025?:
0CBC           2901   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:643: disp_regs();
0CBC 120000    2902            lcall   _disp_regs
0CBF           2903   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:644: break;
0CBF 020000    2904            ljmp    L021220?
0CC2           2905   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:646: case ID_load:
0CC2           2906   L021026?:
0CC2           2907   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:648: break;
0CC2 020000    2908            ljmp    L021220?
0CC5           2909   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:650: case ID_reg_dptr:
0CC5           2910   L021027?:
0CC5           2911   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:651: if(buff_haseq)
0CC5 305010    2912            jnb     _buff_haseq,L021029?
0CC8           2913   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:653: DPL_save=c;
0CC8 904D10    2914            mov     dptr,#_DPL_save
0CCB EE        2915            mov     a,r6
0CCC F0        2916            movx    @dptr,a
0CCD A3        2917            inc     dptr
0CCE E4        2918            clr     a
0CCF F0        2919            movx    @dptr,a
0CD0           2920   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:654: DPH_save=highof(n);
0CD0 AA39      2921            mov     r2,(_do_cmd_n_1_166 + 1)
0CD2 7B00      2922            mov     r3,#0x00
0CD4 904CD0    2923            mov     dptr,#_DPH_save
0CD7 EA        2924            mov     a,r2
0CD8 F0        2925            movx    @dptr,a
0CD9 A3        2926            inc     dptr
0CDA EB        2927            mov     a,r3
0CDB F0        2928            movx    @dptr,a
0CDC           2929   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:655: outcursor();
0CDC 120000    2930            lcall   _outcursor
0CDF 020000    2931            ljmp    L021220?
0CE2           2932   L021029?:
0CE2           2933   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:657: else outwordnl((DPH_save*0x100)+DPL_save);
0CE2 904CD0    2934            mov     dptr,#_DPH_save
0CE5 E0        2935            movx    a,@dptr
0CE6 FA        2936            mov     r2,a
0CE7 A3        2937            inc     dptr
0CE8 E0        2938            movx    a,@dptr
0CE9 8A59      2939            mov     (_do_cmd_sloc0_1_0 + 1),r2
0CEB 755800    2940            mov     _do_cmd_sloc0_1_0,#0x00
0CEE 904D10    2941            mov     dptr,#_DPL_save
0CF1 E0        2942            movx    a,@dptr
0CF2 FF        2943            mov     r7,a
0CF3 A3        2944            inc     dptr
0CF4 E0        2945            movx    a,@dptr
0CF5 FA        2946            mov     r2,a
0CF6 EF        2947            mov     a,r7
0CF7 2558      2948            add     a,_do_cmd_sloc0_1_0
0CF9 F582      2949            mov     dpl,a
0CFB EA        2950            mov     a,r2
0CFC 3559      2951            addc    a,(_do_cmd_sloc0_1_0 + 1)
0CFE F583      2952            mov     dph,a
0D00 120000    2953            lcall   _outwordnl
0D03           2954   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:658: break;
0D03 020000    2955            ljmp    L021220?
0D06           2956   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:660: case ID_reg_pc:
0D06           2957   L021031?:
0D06           2958   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:661: if(buff_haseq)
0D06 305050    2959            jnb     _buff_haseq,L021033?
0D09           2960   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:663: PC_save=n;
0D09 904BD0    2961            mov     dptr,#_PC_save
0D0C E538      2962            mov     a,_do_cmd_n_1_166
0D0E F0        2963            movx    @dptr,a
0D0F A3        2964            inc     dptr
0D10 E539      2965            mov     a,(_do_cmd_n_1_166 + 1)
0D12 F0        2966            movx    @dptr,a
0D13           2967   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:664: outcursor();
0D13 120000    2968            lcall   _outcursor
0D16 020000    2969            ljmp    L021220?
0D19           2970   L021033?:
0D19           2971   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:666: else outwordnl(PC_save);
0D19 904BD0    2972            mov     dptr,#_PC_save
0D1C E0        2973            movx    a,@dptr
0D1D FA        2974            mov     r2,a
0D1E A3        2975            inc     dptr
0D1F E0        2976            movx    a,@dptr
0D20 FB        2977            mov     r3,a
0D21 8A82      2978            mov     dpl,r2
0D23 8B83      2979            mov     dph,r3
0D25 120000    2980            lcall   _outwordnl
0D28           2981   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:667: break;
0D28 020000    2982            ljmp    L021220?
0D2B           2983   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:669: case ID_reg_r0:
0D2B           2984   L021035?:
0D2B           2985   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:670: case ID_reg_r1:
0D2B           2986   L021036?:
0D2B           2987   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:671: case ID_reg_r2:
0D2B           2988   L021037?:
0D2B           2989   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:672: case ID_reg_r3:
0D2B           2990   L021038?:
0D2B           2991   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:673: case ID_reg_r4:
0D2B           2992   L021039?:
0D2B           2993   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:674: case ID_reg_r5:
0D2B           2994   L021040?:
0D2B           2995   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:675: case ID_reg_r6:
0D2B           2996   L021041?:
0D2B           2997   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:676: case ID_reg_r7:
0D2B           2998   L021042?:
0D2B           2999   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:677: d=(PSW_save&0x18)+buff[1]-'0';
0D2B 904DD0    3000            mov     dptr,#_PSW_save
0D2E E0        3001            movx    a,@dptr
0D2F FA        3002            mov     r2,a
0D30 530218    3003            anl     ar2,#0x18
0D33 E521      3004            mov     a,(_buff + 0x0001)
0D35 2A        3005            add     a,r2
0D36 24D0      3006            add     a,#0xd0
0D38 FA        3007            mov     r2,a
0D39           3008   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:678: if(buff_haseq)
0D39 305090    3009            jnb     _buff_haseq,L021044?
0D3C           3010   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:680: iram_save[d]=c;
0D3C EA        3011            mov     a,r2
0D3D 2490      3012            add     a,#_iram_save
0D3F F582      3013            mov     dpl,a
0D41 E4        3014            clr     a
0D42 344E      3015            addc    a,#(_iram_save >> 8)
0D44 F583      3016            mov     dph,a
0D46 EE        3017            mov     a,r6
0D47 F0        3018            movx    @dptr,a
0D48           3019   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:681: outcursor();
0D48 120000    3020            lcall   _outcursor
0D4B 020000    3021            ljmp    L021220?
0D4E           3022   L021044?:
0D4E           3023   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:685: outbytenl(iram_save[d]);
0D4E EA        3024            mov     a,r2
0D4F 2490      3025            add     a,#_iram_save
0D51 F582      3026            mov     dpl,a
0D53 E4        3027            clr     a
0D54 344E      3028            addc    a,#(_iram_save >> 8)
0D56 F583      3029            mov     dph,a
0D58 E0        3030            movx    a,@dptr
0D59 F582      3031            mov     dpl,a
0D5B 120000    3032            lcall   _outbytenl
0D5E           3033   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:687: break;
0D5E 020000    3034            ljmp    L021220?
0D61           3035   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:689: case ID_brl:
0D61           3036   L021046?:
0D61           3037   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:691: get_txbuff();
0D61 120000    3038            lcall   _get_txbuff
0D64           3039   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:692: BPC=0x40;
0D64 75FC40    3040            mov     _BPC,#0x40
0D67           3041   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:693: for(n=0; n<0x8000; n++)
0D67 E4        3042            clr     a
0D68 F538      3043            mov     _do_cmd_n_1_166,a
0D6A F539      3044            mov     (_do_cmd_n_1_166 + 1),a
0D6C           3045   L021222?:
0D6C 7480      3046            mov     a,#0x100 - 0x80
0D6E 2539      3047            add     a,(_do_cmd_n_1_166 + 1)
0D70 5000      3048            jnc     L021336?
0D72 020000    3049            ljmp    L021225?
0D75           3050   L021336?:
0D75           3051   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:695: BPAH=n/0x100;
0D75 AB39      3052            mov     r3,(_do_cmd_n_1_166 + 1)
0D77 8BFF      3053            mov     _BPAH,r3
0D79           3054   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:696: BPAL=n%0x100;
0D79 AB38      3055            mov     r3,_do_cmd_n_1_166
0D7B 7F00      3056            mov     r7,#0x00
0D7D 8BFE      3057            mov     _BPAL,r3
0D7F           3058   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:699: _endasm; //We need to clock-in the value before reading it
0D7F           3059            
0D7F 00        3060                 nop
0D80           3061                 
0D80           3062   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:700: if(BPS&0x01)
0D80 E5FD      3063            mov     a,_BPS
0D82 30E090    3064            jnb     acc.0,L021224?
0D85           3065   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:702: add_wordnl_txbuff(n);
0D85 853882    3066            mov     dpl,_do_cmd_n_1_166
0D88 853983    3067            mov     dph,(_do_cmd_n_1_166 + 1)
0D8B 120000    3068            lcall   _add_wordnl_txbuff
0D8E           3069   L021224?:
0D8E           3070   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:693: for(n=0; n<0x8000; n++)
0D8E 0538      3071            inc     _do_cmd_n_1_166
0D90 E4        3072            clr     a
0D91 B53820    3073            cjne    a,_do_cmd_n_1_166,L021338?
0D94 0539      3074            inc     (_do_cmd_n_1_166 + 1)
0D96           3075   L021338?:
0D96 020000    3076            ljmp    L021222?
0D99           3077   L021225?:
0D99           3078   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:705: BPC=0x00;
0D99 75FC00    3079            mov     _BPC,#0x00
0D9C           3080   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:707: BPAL=0xff;
0D9C 75FEFF    3081            mov     _BPAL,#0xFF
0D9F           3082   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:708: BPAH=0xff;
0D9F 75FFFF    3083            mov     _BPAH,#0xFF
0DA2           3084   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:709: add_cursor_txbuff();
0DA2 120000    3085            lcall   _add_cursor_txbuff
0DA5           3086   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:710: flush_txbuff();
0DA5 120000    3087            lcall   _flush_txbuff
0DA8           3088   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:711: break;
0DA8 020000    3089            ljmp    L021220?
0DAB           3090   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:713: case ID_brc:
0DAB           3091   L021049?:
0DAB           3092   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:715: BPC=0x02;
0DAB 75FC02    3093            mov     _BPC,#0x02
0DAE           3094   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:716: for(n=0; n<0x8000; n++)
0DAE E4        3095            clr     a
0DAF F538      3096            mov     _do_cmd_n_1_166,a
0DB1 F539      3097            mov     (_do_cmd_n_1_166 + 1),a
0DB3           3098   L021226?:
0DB3 7480      3099            mov     a,#0x100 - 0x80
0DB5 2539      3100            add     a,(_do_cmd_n_1_166 + 1)
0DB7 4000      3101            jc      L021229?
0DB9           3102   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:718: BPAH=n/0x100;
0DB9 AB39      3103            mov     r3,(_do_cmd_n_1_166 + 1)
0DBB 8BFF      3104            mov     _BPAH,r3
0DBD           3105   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:719: BPAL=n%0x100;
0DBD AB38      3106            mov     r3,_do_cmd_n_1_166
0DBF 7F00      3107            mov     r7,#0x00
0DC1 8BFE      3108            mov     _BPAL,r3
0DC3           3109   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:716: for(n=0; n<0x8000; n++)
0DC3 0538      3110            inc     _do_cmd_n_1_166
0DC5 E4        3111            clr     a
0DC6 B53860    3112            cjne    a,_do_cmd_n_1_166,L021226?
0DC9 0539      3113            inc     (_do_cmd_n_1_166 + 1)
0DCB 8000      3114            sjmp    L021226?
0DCD           3115   L021229?:
0DCD           3116   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:721: BPAL=0xff;
0DCD 75FEFF    3117            mov     _BPAL,#0xFF
0DD0           3118   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:722: BPC=0x00;
0DD0 75FC00    3119            mov     _BPC,#0x00
0DD3           3120   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:724: BPAL=0xff;
0DD3 75FEFF    3121            mov     _BPAL,#0xFF
0DD6           3122   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:725: BPAH=0xff;
0DD6 75FFFF    3123            mov     _BPAH,#0xFF
0DD9           3124   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:726: outcursor();
0DD9 120000    3125            lcall   _outcursor
0DDC           3126   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:727: break;
0DDC 020000    3127            ljmp    L021220?
0DDF           3128   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:729: case ID_br2:
0DDF           3129   L021050?:
0DDF           3130   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:730: case ID_br3:
0DDF           3131   L021051?:
0DDF           3132   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:731: d=buff[2]-'0';
0DDF E522      3133            mov     a,(_buff + 0x0002)
0DE1 24D0      3134            add     a,#0xd0
0DE3 FA        3135            mov     r2,a
0DE4           3136   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:732: if(buff_haseq) br[d]=n;
0DE4 3050E0    3137            jnb     _buff_haseq,L021053?
0DE7 EA        3138            mov     a,r2
0DE8 2A        3139            add     a,r2
0DE9 FB        3140            mov     r3,a
0DEA 2450      3141            add     a,#_br
0DEC F582      3142            mov     dpl,a
0DEE E4        3143            clr     a
0DEF 344E      3144            addc    a,#(_br >> 8)
0DF1 F583      3145            mov     dph,a
0DF3 E538      3146            mov     a,_do_cmd_n_1_166
0DF5 F0        3147            movx    @dptr,a
0DF6 A3        3148            inc     dptr
0DF7 E539      3149            mov     a,(_do_cmd_n_1_166 + 1)
0DF9 F0        3150            movx    @dptr,a
0DFA 020000    3151            ljmp    L021220?
0DFD           3152   L021053?:
0DFD           3153   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:733: else outwordnl(br[d]);
0DFD EA        3154            mov     a,r2
0DFE 2A        3155            add     a,r2
0DFF 2450      3156            add     a,#_br
0E01 F582      3157            mov     dpl,a
0E03 E4        3158            clr     a
0E04 344E      3159            addc    a,#(_br >> 8)
0E06 F583      3160            mov     dph,a
0E08 E0        3161            movx    a,@dptr
0E09 FB        3162            mov     r3,a
0E0A A3        3163            inc     dptr
0E0B E0        3164            movx    a,@dptr
0E0C FF        3165            mov     r7,a
0E0D 8B82      3166            mov     dpl,r3
0E0F 8F83      3167            mov     dph,r7
0E11 120000    3168            lcall   _outwordnl
0E14           3169   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:734: break;
0E14 020000    3170            ljmp    L021220?
0E17           3171   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:736: case ID_broff:
0E17           3172   L021055?:
0E17           3173   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:738: BPAL=n%0x100;
0E17 AB38      3174            mov     r3,_do_cmd_n_1_166
0E19 8BFE      3175            mov     _BPAL,r3
0E1B           3176   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:739: BPAH=n/0x100;
0E1B AB39      3177            mov     r3,(_do_cmd_n_1_166 + 1)
0E1D 8BFF      3178            mov     _BPAH,r3
0E1F           3179   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:741: BPC=0x00;
0E1F 75FC00    3180            mov     _BPC,#0x00
0E22           3181   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:742: BPC=0x02;
0E22 75FC02    3182            mov     _BPC,#0x02
0E25           3183   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:743: BPC=0x00;
0E25 75FC00    3184            mov     _BPC,#0x00
0E28           3185   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:745: BPAL=0xff;
0E28 75FEFF    3186            mov     _BPAL,#0xFF
0E2B           3187   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:746: BPAH=0xff;
0E2B 75FFFF    3188            mov     _BPAH,#0xFF
0E2E           3189   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:747: outcursor();
0E2E 120000    3190            lcall   _outcursor
0E31           3191   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:748: break;
0E31 020000    3192            ljmp    L021220?
0E34           3193   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:750: case ID_bron:
0E34           3194   L021056?:
0E34           3195   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:752: BPAL=n%0x100;
0E34 AB38      3196            mov     r3,_do_cmd_n_1_166
0E36 8BFE      3197            mov     _BPAL,r3
0E38           3198   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:753: BPAH=n/0x100;
0E38 AB39      3199            mov     r3,(_do_cmd_n_1_166 + 1)
0E3A 8BFF      3200            mov     _BPAH,r3
0E3C           3201   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:755: BPC=0x01;
0E3C 75FC01    3202            mov     _BPC,#0x01
0E3F           3203   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:756: BPC=0x03;
0E3F 75FC03    3204            mov     _BPC,#0x03
0E42           3205   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:757: BPC=0x01;
0E42 75FC01    3206            mov     _BPC,#0x01
0E45           3207   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:759: BPAL=0xff;
0E45 75FEFF    3208            mov     _BPAL,#0xFF
0E48           3209   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:760: BPAH=0xff;
0E48 75FFFF    3210            mov     _BPAH,#0xFF
0E4B           3211   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:761: outcursor();
0E4B 120000    3212            lcall   _outcursor
0E4E           3213   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:762: break;
0E4E 020000    3214            ljmp    L021220?
0E51           3215   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:764: case ID_pcr:  //Restore the PC
0E51           3216   L021057?:
0E51           3217   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:765: restorePC();
0E51 120000    3218            lcall   _restorePC
0E54           3219   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:766: outcursor();
0E54 120000    3220            lcall   _outcursor
0E57           3221   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:767: break;
0E57 020000    3222            ljmp    L021220?
0E5A           3223   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:769: case ID_LEDRA:
0E5A           3224   L021058?:
0E5A           3225   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:770: if(buff_haseq)
0E5A 305020    3226            jnb     _buff_haseq,L021086?
0E5D           3227   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:772: if(buff_hasdot)
0E5D 301060    3228            jnb     _buff_hasdot,L021083?
0E60           3229   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:774: if     (c==0) LEDRA_0=p_bit;
0E60 EE        3230            mov     a,r6
0E61 7000      3231            jnz     L021080?
0E63 A238      3232            mov     c,_do_cmd_p_bit_1_166
0E65 92E8      3233            mov     _LEDRA_0,c
0E67 8000      3234            sjmp    L021084?
0E69           3235   L021080?:
0E69           3236   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:775: else if(c==1) LEDRA_1=p_bit;
0E69 BE0120    3237            cjne    r6,#0x01,L021077?
0E6C A238      3238            mov     c,_do_cmd_p_bit_1_166
0E6E 92E9      3239            mov     _LEDRA_1,c
0E70 8000      3240            sjmp    L021084?
0E72           3241   L021077?:
0E72           3242   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:776: else if(c==2) LEDRA_2=p_bit;
0E72 BE0260    3243            cjne    r6,#0x02,L021074?
0E75 A238      3244            mov     c,_do_cmd_p_bit_1_166
0E77 92EA      3245            mov     _LEDRA_2,c
0E79 8000      3246            sjmp    L021084?
0E7B           3247   L021074?:
0E7B           3248   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:777: else if(c==3) LEDRA_3=p_bit;
0E7B BE03A0    3249            cjne    r6,#0x03,L021071?
0E7E A238      3250            mov     c,_do_cmd_p_bit_1_166
0E80 92EB      3251            mov     _LEDRA_3,c
0E82 8000      3252            sjmp    L021084?
0E84           3253   L021071?:
0E84           3254   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:778: else if(c==4) LEDRA_4=p_bit;
0E84 BE04E0    3255            cjne    r6,#0x04,L021068?
0E87 A238      3256            mov     c,_do_cmd_p_bit_1_166
0E89 92EC      3257            mov     _LEDRA_4,c
0E8B 8000      3258            sjmp    L021084?
0E8D           3259   L021068?:
0E8D           3260   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:779: else if(c==5) LEDRA_5=p_bit;
0E8D BE0520    3261            cjne    r6,#0x05,L021065?
0E90 A238      3262            mov     c,_do_cmd_p_bit_1_166
0E92 92ED      3263            mov     _LEDRA_5,c
0E94 8000      3264            sjmp    L021084?
0E96           3265   L021065?:
0E96           3266   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:780: else if(c==6) LEDRA_6=p_bit;
0E96 BE0660    3267            cjne    r6,#0x06,L021062?
0E99 A238      3268            mov     c,_do_cmd_p_bit_1_166
0E9B 92EE      3269            mov     _LEDRA_6,c
0E9D 8000      3270            sjmp    L021084?
0E9F           3271   L021062?:
0E9F           3272   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:781: else if(c==7) LEDRA_7=p_bit;
0E9F BE07E0    3273            cjne    r6,#0x07,L021084?
0EA2 A238      3274            mov     c,_do_cmd_p_bit_1_166
0EA4 92EF      3275            mov     _LEDRA_7,c
0EA6 8000      3276            sjmp    L021084?
0EA8           3277   L021083?:
0EA8           3278   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:785: LEDRA=c;
0EA8 8EE8      3279            mov     _LEDRA,r6
0EAA           3280   L021084?:
0EAA           3281   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:787: outcursor();
0EAA 120000    3282            lcall   _outcursor
0EAD 020000    3283            ljmp    L021220?
0EB0           3284   L021086?:
0EB0           3285   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:789: else putsp(cnr);
0EB0 9012A0    3286            mov     dptr,#_cnr
0EB3 75F080    3287            mov     b,#0x80
0EB6 120000    3288            lcall   _putsp
0EB9           3289   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:790: break;
0EB9 020000    3290            ljmp    L021220?
0EBC           3291   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:792: case ID_LEDRB:
0EBC           3292   L021088?:
0EBC           3293   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:793: if(buff_haseq)
0EBC 3050A0    3294            jnb     _buff_haseq,L021093?
0EBF           3295   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:795: if(buff_hasdot)
0EBF 3010E0    3296            jnb     _buff_hasdot,L021090?
0EC2           3297   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:797: putsp(nba);
0EC2 9012E0    3298            mov     dptr,#_nba
0EC5 75F080    3299            mov     b,#0x80
0EC8 120000    3300            lcall   _putsp
0ECB 020000    3301            ljmp    L021220?
0ECE           3302   L021090?:
0ECE           3303   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:801: LEDRB=c;
0ECE 8E95      3304            mov     _LEDRB,r6
0ED0           3305   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:802: outcursor();
0ED0 120000    3306            lcall   _outcursor
0ED3 020000    3307            ljmp    L021220?
0ED6           3308   L021093?:
0ED6           3309   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:805: else putsp(cnr);
0ED6 9012A0    3310            mov     dptr,#_cnr
0ED9 75F080    3311            mov     b,#0x80
0EDC 120000    3312            lcall   _putsp
0EDF           3313   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:806: break;
0EDF 020000    3314            ljmp    L021220?
0EE2           3315   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:808: case ID_KEY:
0EE2           3316   L021095?:
0EE2           3317   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:809: case ID_SWA:
0EE2           3318   L021096?:
0EE2           3319   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:810: if(buff_haseq==0)
0EE2 305020    3320            jnb     _buff_haseq,L021361?
0EE5 020000    3321            ljmp    L021138?
0EE8           3322   L021361?:
0EE8           3323   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:812: if(buff_hasdot)
0EE8 2010A0    3324            jb      _buff_hasdot,L021362?
0EEB 020000    3325            ljmp    L021135?
0EEE           3326   L021362?:
0EEE           3327   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:814: if(cmd==ID_SWA)
0EEE 7428      3328            mov     a,#0x28
0EF0 B50820    3329            cjne    a,_do_cmd_cmd_1_166,L021132?
0EF3           3330   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:816: if     (c==0) p_bit=SWA_0;
0EF3 EE        3331            mov     a,r6
0EF4 7000      3332            jnz     L021118?
0EF6 A2E8      3333            mov     c,_SWA_0
0EF8 9238      3334            mov     _do_cmd_p_bit_1_166,c
0EFA 8000      3335            sjmp    L021133?
0EFC           3336   L021118?:
0EFC           3337   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:817: else if(c==1) p_bit=SWA_1;
0EFC BE01E0    3338            cjne    r6,#0x01,L021115?
0EFF A2E9      3339            mov     c,_SWA_1
0F01 9238      3340            mov     _do_cmd_p_bit_1_166,c
0F03 8000      3341            sjmp    L021133?
0F05           3342   L021115?:
0F05           3343   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:818: else if(c==2) p_bit=SWA_2;
0F05 BE0220    3344            cjne    r6,#0x02,L021112?
0F08 A2EA      3345            mov     c,_SWA_2
0F0A 9238      3346            mov     _do_cmd_p_bit_1_166,c
0F0C 8000      3347            sjmp    L021133?
0F0E           3348   L021112?:
0F0E           3349   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:819: else if(c==3) p_bit=SWA_3;
0F0E BE0360    3350            cjne    r6,#0x03,L021109?
0F11 A2EB      3351            mov     c,_SWA_3
0F13 9238      3352            mov     _do_cmd_p_bit_1_166,c
0F15 8000      3353            sjmp    L021133?
0F17           3354   L021109?:
0F17           3355   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:820: else if(c==4) p_bit=SWA_4;
0F17 BE04A0    3356            cjne    r6,#0x04,L021106?
0F1A A2EC      3357            mov     c,_SWA_4
0F1C 9238      3358            mov     _do_cmd_p_bit_1_166,c
0F1E 8000      3359            sjmp    L021133?
0F20           3360   L021106?:
0F20           3361   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:821: else if(c==5) p_bit=SWA_5;
0F20 BE05E0    3362            cjne    r6,#0x05,L021103?
0F23 A2ED      3363            mov     c,_SWA_5
0F25 9238      3364            mov     _do_cmd_p_bit_1_166,c
0F27 8000      3365            sjmp    L021133?
0F29           3366   L021103?:
0F29           3367   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:822: else if(c==6) p_bit=SWA_6;
0F29 BE0620    3368            cjne    r6,#0x06,L021100?
0F2C A2EE      3369            mov     c,_SWA_6
0F2E 9238      3370            mov     _do_cmd_p_bit_1_166,c
0F30 8000      3371            sjmp    L021133?
0F32           3372   L021100?:
0F32           3373   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:823: else if(c==7) p_bit=SWA_7;
0F32 BE07A0    3374            cjne    r6,#0x07,L021133?
0F35 A2EF      3375            mov     c,_SWA_7
0F37 9238      3376            mov     _do_cmd_p_bit_1_166,c
0F39 8000      3377            sjmp    L021133?
0F3B           3378   L021132?:
0F3B           3379   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:827: if     (c==0) p_bit=KEY_0;
0F3B EE        3380            mov     a,r6
0F3C 7000      3381            jnz     L021129?
0F3E A2F8      3382            mov     c,_KEY_0
0F40 9238      3383            mov     _do_cmd_p_bit_1_166,c
0F42 8000      3384            sjmp    L021133?
0F44           3385   L021129?:
0F44           3386   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:828: else if(c==1) p_bit=KEY_1;
0F44 BE01A0    3387            cjne    r6,#0x01,L021126?
0F47 A2F9      3388            mov     c,_KEY_1
0F49 9238      3389            mov     _do_cmd_p_bit_1_166,c
0F4B 8000      3390            sjmp    L021133?
0F4D           3391   L021126?:
0F4D           3392   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:829: else if(c==2) p_bit=KEY_2;
0F4D BE02E0    3393            cjne    r6,#0x02,L021123?
0F50 A2FA      3394            mov     c,_KEY_2
0F52 9238      3395            mov     _do_cmd_p_bit_1_166,c
0F54 8000      3396            sjmp    L021133?
0F56           3397   L021123?:
0F56           3398   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:830: else if(c==3) p_bit=KEY_3;
0F56 BE03A0    3399            cjne    r6,#0x03,L021133?
0F59 A2FB      3400            mov     c,_KEY_3
0F5B 9238      3401            mov     _do_cmd_p_bit_1_166,c
0F5D           3402   L021133?:
0F5D           3403   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:832: putcnl(p_bit?'1':'0');
0F5D 303820    3404            jnb     _do_cmd_p_bit_1_166,L021240?
0F60 7B31      3405            mov     r3,#0x31
0F62 8000      3406            sjmp    L021241?
0F64           3407   L021240?:
0F64 7B30      3408            mov     r3,#0x30
0F66           3409   L021241?:
0F66 8B82      3410            mov     dpl,r3
0F68 120000    3411            lcall   _putcnl
0F6B 020000    3412            ljmp    L021220?
0F6E           3413   L021135?:
0F6E           3414   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:836: outbytenl(cmd==ID_SWA?SWA:KEY);
0F6E 7428      3415            mov     a,#0x28
0F70 B508A0    3416            cjne    a,_do_cmd_cmd_1_166,L021242?
0F73 ABE8      3417            mov     r3,_SWA
0F75 8000      3418            sjmp    L021243?
0F77           3419   L021242?:
0F77 ABF8      3420            mov     r3,_KEY
0F79           3421   L021243?:
0F79 8B82      3422            mov     dpl,r3
0F7B 120000    3423            lcall   _outbytenl
0F7E 020000    3424            ljmp    L021220?
0F81           3425   L021138?:
0F81           3426   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:839: else putsp(cnw);
0F81 901260    3427            mov     dptr,#_cnw
0F84 75F080    3428            mov     b,#0x80
0F87 120000    3429            lcall   _putsp
0F8A           3430   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:840: break;
0F8A 020000    3431            ljmp    L021220?
0F8D           3432   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:842: case ID_SWB:
0F8D           3433   L021140?:
0F8D           3434   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:843: if(buff_haseq==0)
0F8D 205020    3435            jb      _buff_haseq,L021145?
0F90           3436   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:845: if(buff_hasdot)
0F90 301060    3437            jnb     _buff_hasdot,L021142?
0F93           3438   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:847: putsp(nba);
0F93 9012E0    3439            mov     dptr,#_nba
0F96 75F080    3440            mov     b,#0x80
0F99 120000    3441            lcall   _putsp
0F9C           3442   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:848: break;
0F9C 020000    3443            ljmp    L021220?
0F9F           3444   L021142?:
0F9F           3445   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:852: outbytenl(SWB);
0F9F 859582    3446            mov     dpl,_SWB
0FA2 120000    3447            lcall   _outbytenl
0FA5 020000    3448            ljmp    L021220?
0FA8           3449   L021145?:
0FA8           3450   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:855: else putsp(cnw);
0FA8 901260    3451            mov     dptr,#_cnw
0FAB 75F080    3452            mov     b,#0x80
0FAE 120000    3453            lcall   _putsp
0FB1           3454   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:856: break;
0FB1 020000    3455            ljmp    L021220?
0FB4           3456   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:858: case ID_BANK:
0FB4           3457   L021147?:
0FB4           3458   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:859: if(buff_haseq)
0FB4 3050A0    3459            jnb     _buff_haseq,L021154?
0FB7           3460   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:861: PSW_save&=0b_1110_0111;
0FB7 904DD0    3461            mov     dptr,#_PSW_save
0FBA E0        3462            movx    a,@dptr
0FBB FB        3463            mov     r3,a
0FBC 54E7      3464            anl     a,#0xE7
0FBE F0        3465            movx    @dptr,a
0FBF           3466   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:862: switch(c&3)
0FBF 7403      3467            mov     a,#0x03
0FC1 5E        3468            anl     a,r6
0FC2 FB        3469            mov  r3,a
0FC3 24FC      3470            add     a,#0xff - 0x03
0FC5 4000      3471            jc      L021152?
0FC7 EB        3472            mov     a,r3
0FC8 2B        3473            add     a,r3
0FC9 2B        3474            add     a,r3
0FCA 90CC20    3475            mov     dptr,#L021394?
0FCD 73        3476            jmp     @a+dptr
0FCE           3477   L021394?:
0FCE 020000    3478            ljmp    L021148?
0FD1 020000    3479            ljmp    L021149?
0FD4 020000    3480            ljmp    L021150?
0FD7 020000    3481            ljmp    L021151?
0FDA           3482   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:864: case 0:
0FDA           3483   L021148?:
0FDA           3484   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:865: break;
0FDA           3485   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:866: case 1:
0FDA 8000      3486            sjmp    L021152?
0FDC           3487   L021149?:
0FDC           3488   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:867: PSW_save|=0b_0000_1000;
0FDC 904DD0    3489            mov     dptr,#_PSW_save
0FDF E0        3490            movx    a,@dptr
0FE0 FB        3491            mov     r3,a
0FE1 4408      3492            orl     a,#0x08
0FE3 F0        3493            movx    @dptr,a
0FE4           3494   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:868: break;
0FE4           3495   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:869: case 2:
0FE4 8000      3496            sjmp    L021152?
0FE6           3497   L021150?:
0FE6           3498   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:870: PSW_save|=0b_0001_0000;
0FE6 904DD0    3499            mov     dptr,#_PSW_save
0FE9 E0        3500            movx    a,@dptr
0FEA FB        3501            mov     r3,a
0FEB 4410      3502            orl     a,#0x10
0FED F0        3503            movx    @dptr,a
0FEE           3504   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:871: break;
0FEE           3505   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:872: case 3:
0FEE 8000      3506            sjmp    L021152?
0FF0           3507   L021151?:
0FF0           3508   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:873: PSW_save|=0b_0001_1000;
0FF0 904DD0    3509            mov     dptr,#_PSW_save
0FF3 E0        3510            movx    a,@dptr
0FF4 FB        3511            mov     r3,a
0FF5 4418      3512            orl     a,#0x18
0FF7 F0        3513            movx    @dptr,a
0FF8           3514   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:875: }
0FF8           3515   L021152?:
0FF8           3516   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:876: outcursor();
0FF8 120000    3517            lcall   _outcursor
0FFB 020000    3518            ljmp    L021220?
0FFE           3519   L021154?:
0FFE           3520   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:880: outbytenl((PSW_save/0x8)&0x3);
0FFE 904DD0    3521            mov     dptr,#_PSW_save
1001 E0        3522            movx    a,@dptr
1002 C4        3523            swap    a
1003 23        3524            rl      a
1004 541F      3525            anl     a,#0x1f
1006 FB        3526            mov     r3,a
1007 7403      3527            mov     a,#0x03
1009 5B        3528            anl     a,r3
100A F582      3529            mov     dpl,a
100C 120000    3530            lcall   _outbytenl
100F           3531   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:882: break;
100F 020000    3532            ljmp    L021220?
1012           3533   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:884: default:
1012           3534   L021156?:
1012           3535   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:886: y=nlist(bitn); //Search for bit names first
1012 900000    3536            mov     dptr,#_bitn
1015 75F080    3537            mov     b,#0x80
1018 C004      3538            push    ar4
101A C005      3539            push    ar5
101C C006      3540            push    ar6
101E 120000    3541            lcall   _nlist
1021 8582B8    3542            mov     _do_cmd_y_1_166,dpl
1024 D006      3543            pop     ar6
1026 D005      3544            pop     ar5
1028 D004      3545            pop     ar4
102A           3546   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:887: if (y!=0xff)
102A 74FF      3547            mov     a,#0xFF
102C B5B8A0    3548            cjne    a,_do_cmd_y_1_166,L021395?
102F 8000      3549            sjmp    L021160?
1031           3550   L021395?:
1031           3551   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:889: x=y&0xf8;
1031 74F8      3552            mov     a,#0xF8
1033 55B8      3553            anl     a,_do_cmd_y_1_166
1035 FF        3554            mov     r7,a
1036           3555   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:890: y=maskbit[y&0x7];
1036 7407      3556            mov     a,#0x07
1038 55B8      3557            anl     a,_do_cmd_y_1_166
103A 901320    3558            mov     dptr,#_maskbit
103D 93        3559            movc    a,@a+dptr
103E F5B8      3560            mov     _do_cmd_y_1_166,a
1040 8000      3561            sjmp    L021161?
1042           3562   L021160?:
1042           3563   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:894: x=nlist(sfrn); //Is not a bit, try a sfr
1042 900000    3564            mov     dptr,#_sfrn
1045 75F080    3565            mov     b,#0x80
1048 C004      3566            push    ar4
104A C005      3567            push    ar5
104C C006      3568            push    ar6
104E 120000    3569            lcall   _nlist
1051 AF82      3570            mov     r7,dpl
1053 D006      3571            pop     ar6
1055 D005      3572            pop     ar5
1057 D004      3573            pop     ar4
1059           3574   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:895: if(buff_hasdot)
1059 301020    3575            jnb     _buff_hasdot,L021161?
105C           3576   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:897: y=maskbit[c&0x7];
105C 7407      3577            mov     a,#0x07
105E 5E        3578            anl     a,r6
105F 901320    3579            mov     dptr,#_maskbit
1062 93        3580            movc    a,@a+dptr
1063 F5B8      3581            mov     _do_cmd_y_1_166,a
1065           3582   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:898: c=p;
1065 8C06      3583            mov     ar6,r4
1067           3584   L021161?:
1067           3585   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:902: if(x!=0xff)
1067 BFFFA0    3586            cjne    r7,#0xFF,L021397?
106A 020000    3587            ljmp    L021216?
106D           3588   L021397?:
106D           3589   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:905: /**/ if (x==0xd0) d=PSW_save;
106D E4        3590            clr     a
106E BFD020    3591            cjne    r7,#0xD0,L021398?
1071 04        3592            inc     a
1072           3593   L021398?:
1072 FC        3594            mov     r4,a
1073 6000      3595            jz      L021181?
1075 904DD0    3596            mov     dptr,#_PSW_save
1078 E0        3597            movx    a,@dptr
1079 FA        3598            mov     r2,a
107A 8000      3599            sjmp    L021182?
107C           3600   L021181?:
107C           3601   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:906: else if (x==0xe0) d=A_save;
107C BFE0E8    3602            cjne    r7,#0xE0,L021178?
107F 904E10    3603            mov     dptr,#_A_save
1082 E0        3604            movx    a,@dptr
1083 FA        3605            mov     r2,a
1084 8000      3606            sjmp    L021182?
1086           3607   L021178?:
1086           3608   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:907: else if (x==0xf0) d=B_save;
1086 BFF028    3609            cjne    r7,#0xF0,L021175?
1089 904D90    3610            mov     dptr,#_B_save
108C E0        3611            movx    a,@dptr
108D FA        3612            mov     r2,a
108E 8000      3613            sjmp    L021182?
1090           3614   L021175?:
1090           3615   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:908: else if (x==0xa8) d=IE_save;
1090 BFA868    3616            cjne    r7,#0xA8,L021172?
1093 904D50    3617            mov     dptr,#_IE_save
1096 E0        3618            movx    a,@dptr
1097 FA        3619            mov     r2,a
1098 8000      3620            sjmp    L021182?
109A           3621   L021172?:
109A           3622   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:909: else if (x==0x81) d=SP_save;
109A BF81A8    3623            cjne    r7,#0x81,L021169?
109D 904C90    3624            mov     dptr,#_SP_save
10A0 E0        3625            movx    a,@dptr
10A1 FA        3626            mov     r2,a
10A2 8000      3627            sjmp    L021182?
10A4           3628   L021169?:
10A4           3629   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:910: else if (x==0x82) d=DPL_save;
10A4 BF82E8    3630            cjne    r7,#0x82,L021166?
10A7 904D10    3631            mov     dptr,#_DPL_save
10AA E0        3632            movx    a,@dptr
10AB FD        3633            mov     r5,a
10AC A3        3634            inc     dptr
10AD E0        3635            movx    a,@dptr
10AE FB        3636            mov     r3,a
10AF 8D02      3637            mov     ar2,r5
10B1 8000      3638            sjmp    L021182?
10B3           3639   L021166?:
10B3           3640   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:911: else if (x==0x83) d=DPH_save;
10B3 BF8328    3641            cjne    r7,#0x83,L021163?
10B6 904CD0    3642            mov     dptr,#_DPH_save
10B9 E0        3643            movx    a,@dptr
10BA FB        3644            mov     r3,a
10BB A3        3645            inc     dptr
10BC E0        3646            movx    a,@dptr
10BD FD        3647            mov     r5,a
10BE 8B02      3648            mov     ar2,r3
10C0 8000      3649            sjmp    L021182?
10C2           3650   L021163?:
10C2           3651   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:912: else d=read_sfr(x);
10C2 8F82      3652            mov     dpl,r7
10C4 C004      3653            push    ar4
10C6 C006      3654            push    ar6
10C8 C007      3655            push    ar7
10CA 120000    3656            lcall   _read_sfr
10CD AA82      3657            mov     r2,dpl
10CF D007      3658            pop     ar7
10D1 D006      3659            pop     ar6
10D3 D004      3660            pop     ar4
10D5           3661   L021182?:
10D5           3662   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:915: if(y!=0xff)
10D5 74FF      3663            mov     a,#0xFF
10D7 B5B8A8    3664            cjne    a,_do_cmd_y_1_166,L021413?
10DA 7401      3665            mov     a,#0x01
10DC 8000      3666            sjmp    L021414?
10DE           3667   L021413?:
10DE E4        3668            clr     a
10DF           3669   L021414?:
10DF FB        3670            mov     r3,a
10E0 7000      3671            jnz     L021187?
10E2           3672   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:917: if(c) c=d|y;
10E2 EE        3673            mov     a,r6
10E3 6000      3674            jz      L021184?
10E5 E5B8      3675            mov     a,_do_cmd_y_1_166
10E7 4A        3676            orl     a,r2
10E8 FE        3677            mov     r6,a
10E9 8000      3678            sjmp    L021187?
10EB           3679   L021184?:
10EB           3680   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:918: else c=d&(~y);
10EB E5B8      3681            mov     a,_do_cmd_y_1_166
10ED F4        3682            cpl     a
10EE FD        3683            mov     r5,a
10EF 5A        3684            anl     a,r2
10F0 FE        3685            mov     r6,a
10F1           3686   L021187?:
10F1           3687   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:922: if(buff_haseq)
10F1 3050A8    3688            jnb     _buff_haseq,L021213?
10F4           3689   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:924: /**/ if (x==0xd0) PSW_save=c;
10F4 EC        3690            mov     a,r4
10F5 6000      3691            jz      L021207?
10F7 904DD0    3692            mov     dptr,#_PSW_save
10FA EE        3693            mov     a,r6
10FB F0        3694            movx    @dptr,a
10FC 8000      3695            sjmp    L021208?
10FE           3696   L021207?:
10FE           3697   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:925: else if (x==0xe0) A_save=c;
10FE BFE068    3698            cjne    r7,#0xE0,L021204?
1101 904E10    3699            mov     dptr,#_A_save
1104 EE        3700            mov     a,r6
1105 F0        3701            movx    @dptr,a
1106 8000      3702            sjmp    L021208?
1108           3703   L021204?:
1108           3704   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:926: else if (x==0xf0) B_save=c;
1108 BFF0A8    3705            cjne    r7,#0xF0,L021201?
110B 904D90    3706            mov     dptr,#_B_save
110E EE        3707            mov     a,r6
110F F0        3708            movx    @dptr,a
1110 8000      3709            sjmp    L021208?
1112           3710   L021201?:
1112           3711   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:927: else if (x==0xa8) IE_save=c;
1112 BFA8E8    3712            cjne    r7,#0xA8,L021198?
1115 904D50    3713            mov     dptr,#_IE_save
1118 EE        3714            mov     a,r6
1119 F0        3715            movx    @dptr,a
111A 8000      3716            sjmp    L021208?
111C           3717   L021198?:
111C           3718   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:928: else if (x==0x81) SP_save=c;
111C BF8128    3719            cjne    r7,#0x81,L021195?
111F 904C90    3720            mov     dptr,#_SP_save
1122 EE        3721            mov     a,r6
1123 F0        3722            movx    @dptr,a
1124 8000      3723            sjmp    L021208?
1126           3724   L021195?:
1126           3725   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:929: else if (x==0x82) DPL_save=c;
1126 BF8268    3726            cjne    r7,#0x82,L021192?
1129 904D10    3727            mov     dptr,#_DPL_save
112C EE        3728            mov     a,r6
112D F0        3729            movx    @dptr,a
112E A3        3730            inc     dptr
112F E4        3731            clr     a
1130 F0        3732            movx    @dptr,a
1131 8000      3733            sjmp    L021208?
1133           3734   L021192?:
1133           3735   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:930: else if (x==0x83) DPH_save=c;
1133 BF83A8    3736            cjne    r7,#0x83,L021189?
1136 904CD0    3737            mov     dptr,#_DPH_save
1139 EE        3738            mov     a,r6
113A F0        3739            movx    @dptr,a
113B A3        3740            inc     dptr
113C E4        3741            clr     a
113D F0        3742            movx    @dptr,a
113E 8000      3743            sjmp    L021208?
1140           3744   L021189?:
1140           3745   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:931: else write_sfr(x, c);
1140 8E00      3746            mov     _write_sfr_PARM_2,r6
1142 8F82      3747            mov     dpl,r7
1144 120000    3748            lcall   _write_sfr
1147           3749   L021208?:
1147           3750   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:932: outcursor();
1147 120000    3751            lcall   _outcursor
114A 020000    3752            ljmp    L021220?
114D           3753   L021213?:
114D           3754   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:936: if(y==0xff)
114D EB        3755            mov     a,r3
114E 6000      3756            jz      L021210?
1150           3757   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:937: outbytenl(d);
1150 8A82      3758            mov     dpl,r2
1152 120000    3759            lcall   _outbytenl
1155 020000    3760            ljmp    L021220?
1158           3761   L021210?:
1158           3762   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:940: putcnl((d&y)?'1':'0');
1158 E5B8      3763            mov     a,_do_cmd_y_1_166
115A 5A        3764            anl     a,r2
115B 6000      3765            jz      L021244?
115D 7A31      3766            mov     r2,#0x31
115F 8000      3767            sjmp    L021245?
1161           3768   L021244?:
1161 7A30      3769            mov     r2,#0x30
1163           3770   L021245?:
1163 8A82      3771            mov     dpl,r2
1165 120000    3772            lcall   _putcnl
1168 020000    3773            ljmp    L021220?
116B           3774   L021216?:
116B           3775   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:944: else putsp("What?\n> ");
116B 90D638    3776            mov     dptr,#__str_4
116E 75F080    3777            mov     b,#0x80
1171 120000    3778            lcall   _putsp
1174           3779   ;        C:\Source\CV_8052_MAC\Cmon51\.\cmon51.c:946: }
1174 020000    3780            ljmp    L021220?
1177           3781            rseg R_CSEG
1177           3782   
0000           3783            rseg R_XINIT
0000           3784   
0000           3785            rseg R_CONST
0000           3786   _cmdlst:
0000 80        3787            db 0x80
0001 44        3788            db 'D'
0002 81        3789            db 0x81
0003 4D44      3790            db 'MD'
0005 82        3791            db 0x82
0006 4644      3792            db 'FD'
0008 83        3793            db 0x83
0009 49        3794            db 'I'
000A 84        3795            db 0x84
000B 4D49      3796            db 'MI'
000D 85        3797            db 0x85
000E 4649      3798            db 'FI'
0010 86        3799            db 0x86
0011 58        3800            db 'X'
0012 87        3801            db 0x87
0013 4D58      3802            db 'MX'
0015 88        3803            db 0x88
0016 4658      3804            db 'FX'
0018 89        3805            db 0x89
0019 43        3806            db 'C'
001A 8A        3807            db 0x8A
001B 55        3808            db 'U'
001C 8B        3809            db 0x8B
001D 47        3810            db 'G'
001E 8C        3811            db 0x8C
001F 53        3812            db 'S'
0020 8D        3813            db 0x8D
0021 52        3814            db 'R'
0022 8E        3815            db 0x8E
0023 4C        3816            db 'L'
0024 8F        3817            db 0x8F
0025 44505452  3818            db 'DPTR'
0029 90        3819            db 0x90
002A 5043      3820            db 'PC'
002C 91        3821            db 0x91
002D 54        3822            db 'T'
002E 92        3823            db 0x92
002F 5230      3824            db 'R0'
0031 93        3825            db 0x93
0032 5231      3826            db 'R1'
0034 94        3827            db 0x94
0035 5232      3828            db 'R2'
0037 95        3829            db 0x95
0038 5233      3830            db 'R3'
003A 96        3831            db 0x96
003B 52        3832            db 'R'
003C 34        3833            db '4'
003D 97        3834            db 0x97
003E 5235      3835            db 'R5'
0040 98        3836            db 0x98
0041 5236      3837            db 'R6'
0043 99        3838            db 0x99
0044 5237      3839            db 'R7'
0046 9A        3840            db 0x9A
0047 5452      3841            db 'TR'
0049 9B        3842            db 0x9B
004A 4742      3843            db 'GB'
004C 9C        3844            db 0x9C
004D 42524C    3845            db 'BRL'
0050 9D        3846            db 0x9D
0051 425243    3847            db 'BRC'
0054 9E        3848            db 0x9E
0055 425232    3849            db 'BR2'
0058 9F        3850            db 0x9F
0059 425233    3851            db 'BR3'
005C A0        3852            db 0xA0
005D 42524F46  3853            db 'BROFF'
     46
0062 A1        3854            db 0xA1
0063 42524F4E  3855            db 'BRON'
0067 A2        3856            db 0xA2
0068 504352    3857            db 'PCR'
006B A3        3858            db 0xA3
006C 4C454447  3859            db 'LEDG'
0070 A4        3860            db 0xA4
0071 4C454452  3861            db 'LEDRA'
     41
0076 A5        3862            db 0xA5
0077 4C        3863            db 'L'
0078 45445242  3864            db 'EDRB'
007C A6        3865            db 0xA6
007D 4C454452  3866            db 'LEDRC'
     43
0082 A7        3867            db 0xA7
0083 4B4559    3868            db 'KEY'
0086 A8        3869            db 0xA8
0087 535741    3870            db 'SWA'
008A A9        3871            db 0xA9
008B 535742    3872            db 'SWB'
008E AA        3873            db 0xAA
008F 535743    3874            db 'SWC'
0092 AB        3875            db 0xAB
0093 42414E4B  3876            db 'BANK'
0097 AC        3877            db 0xAC
0098 4D43      3878            db 'MC'
009A AD        3879            db 0xAD
009B 4643      3880            db 'FC'
009D AE        3881            db 0xAE
009E AF        3882            db 0xAF
009F 00        3883            db 0x00
00A0 00        3884            db 0x00
00A1           3885   _hexval:
00A1 30313233  3886            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
00B1 00        3887            db 0x00
00B2           3888   _maskbit:
00B2 01        3889            db 0x01         ; 1
00B3 02        3890            db 0x02         ; 2
00B4 04        3891            db 0x04         ; 4
00B5 08        3892            db 0x08         ; 8
00B6 10        3893            db 0x10         ; 16
00B7 20        3894            db 0x20         ; 32
00B8 40        3895            db 0x40         ; 64
00B9 80        3896            db 0x80         ; 128
00BA           3897   _nba:
00BA 4E6F7420  3898            db 'Not bit-addressable!'
     6269742D
     61646472
     65737361
     626C6521
00CE 0A        3899            db 0x0A
00CF 3E20      3900            db '> '
00D1 00        3901            db 0x00
00D2           3902   _cnr:
00D2 43616E    3903            db 'Can'
00D5 27        3904            db 0x27
00D6 74207265  3905            db 't read!'
     616421
00DD 0A        3906            db 0x0A
00DE 3E20      3907            db '> '
00E0 00        3908            db 0x00
00E1           3909   _cnw:
00E1 43616E    3910            db 'Can'
00E4 27        3911            db 0x27
00E5 74207772  3912            db 't write!'
     69746521
00ED 0A        3913            db 0x0A
00EE 3E20      3914            db '> '
00F0 00        3915            db 0x00
00F1           3916   __str_0:
00F1 3D2020    3917            db '=  '
00F4 00        3918            db 0x00
00F5           3919   __str_1:
00F5 3A2020    3920            db ':  '
00F8 00        3921            db 0x00
00F9           3922   __str_2:
00F9 202020    3923            db '   '
00FC 00        3924            db 0x00
00FD           3925   _regframe:
00FD 41203D78  3926            db 'A =xx  B =xx  SP=xx  IE=xx  DPH=xx DPL=xx PSW=xx PC=xxxx'
     78202042
     203D7878
     20205350
     3D787820
     2049453D
     78782020
     4450483D
     78782044
     504C3D78
     78205053
     573D7878
     2050433D
     78787878
0135 0D        3927            db 0x0D
0136 0A        3928            db 0x0A
0137 5230      3929            db 'R0'
0139 3D787820  3930            db '=xx  R1=xx  R2=xx  R3=xx  R4=xx  R5=xx  R6=xx  R7=xx  BANK=x'
     2052313D
     78782020
     52323D78
     78202052
     333D7878
     20205234
     3D787820
     2052353D
     78782020
     52363D78
     78202052
     373D7878
     20204241
     4E4B3D78
0175 0D        3931            db 0x0D
0176 0A        3932            db 0x0A
0177 00        3933            db 0x00
0178           3934   __str_3:
0178 0A        3935            db 0x0A
0179 0A        3936            db 0x0A
017A 434D4F4E  3937            db 'CMON51 V2.0'
     35312056
     322E30
0185 0A        3938            db 0x0A
0186 436F7079  3939            db 'CopyRight (c) 2005-2023 Jesus Calvino-Fraga'
     52696768
     74202863
     29203230
     30352D32
     30323320
     4A657375
     73204361
     6C76696E
     6F2D4672
     616761
01B1 0A        3940            db 0x0A
01B2 506F      3941            db 'Po'
01B4 72743A20  3942            db 'rt: CV_8052 V1.1'
     43565F38
     30353220
     56312E31
01C4 0A        3943            db 0x0A
01C5 3E20      3944            db '> '
01C7 00        3945            db 0x00
01C8           3946   __str_4:
01C8 57686174  3947            db 'What?'
     3F
01CD 0A        3948            db 0x0A
01CE 3E20      3949            db '> '
01D0 00        3950            db 0x00
01D1           3951   
0000           3952            CSEG
0000           3953   
0000           3954   end
